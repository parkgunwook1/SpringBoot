jdbc : 자바에서 데이터베이스에 접근할 수 있게 해주는 프로그래밍 api

vo(Value Object) : db테이블의 한 행에 대한 데이터를 기록하기 위한 저장용 객체
vo 조건
- 반드시 캡슐화 적용
- 기본생성자 및 매개변수 생성자를 작성해야 한다.
- 모든 필드에 대해 getter 메소드를 작성해야 한다.

객체 생성방식
1. 생성자를 이용한 객체 생성 : 객체 생성시 매개변수로 데이터를 넣어줘서 객체 생성
단점)
1. 인자들이 많을수록 생성자 또한 많아질 수 있다.
2. 매개변수명이 상관없는 정보이며 잘못된 위치에 데이터를 추가하게 될 위험이 있음.

기본 생성자 활용한 setter 메소드 이용한 객체 생성
단점)
1. 잘못된 위치에 데이터를 추가하게 될 리스크가 낮아지긴 하지만, 코드의 길이가 길어진다. (객체의 일관성이 깨진다.)

그래서 빌더패턴 생성 방식을 활용해야 한다.
생성자에 최소 4개 이상의 매개변수가 있어야 빌더패턴을 고려한다.

빌더패턴 이용시 장점
1. 불필요한 생성자 제거
2. 데이터의 순서와 상관없이 객체 생성 가능하다.
3. 명시적으로 메소드명을 선언하여 가독성이 좋음
4. 각 인자가 어떤 데이터인지 즉시 확인 가능
5. setter 함수를 만들지 않으므로 객체 일관성이 유지된다.

view => 사용자가 보게될 시각적인 요소를 담당 (화면 : 입-출력)

Controller => View를 통해서 들어온 요청을 담당
- 해당 메소드로 전달된 데이터들을 가공처리한 후 dao 메소드 호출시 전달한다.
- dao로부터 반환받은 결과에 따라 사용자가 보게될 화면을 지정한다.

DAO(Data Access Object)
- Controller에게 요청받은 실질적인 기능을 수행하기 위해서 db에 직접 접근 후 sql문을 실행하고 결과값 돌려받음

JDBC용 객체
- Connection : DB의 연결정보를 담고 있는 객체(IP주소, PORT번호, 계정명, 비밀번호)
- (Prepared)Statement : 해당 DB에 SQL문을 전달하고 실행한 후 결과를 받아내는 객체
- ResultSet : 내가 실행한 sql문이 select문일 경우 조회된 결과를 담아주는 객체

 JDBC 처리순서
1. JDBC Driver 등록 : DBMS가 제공하는 클래스 등록(우리는 오라클 DBMS 등록)
2. Connection : 접속하고자 하는 db정보를 입력해서 db에 접속(접속시 Connection 생성)
		접속 성공하면 Connection 객체가 반환됨
3. Statement 생성 : Connection 객체를 이용해서 생성 = > Statement : 완성된 sql문을 실행할 수 있는 객체
4. SQL 문을 전달하면서 쿼리문 실행 : Statement 객체를 이용해서 sql문 실행
	-> SELECT 문일 경우 - excuteQuery() 메소드를 이용해서 실행
	-> 나머지 DML문일 경우 - excuteUpdate() 메소드를 이용하여 실행
5. 결과 반환
	-> SELECT문일 경우 - 결과값은 ResultSet 객체로 받기(조회된 데이터들이 담겨있음)
	->나머지 dml일 경우 - int형 변수로 받기(처리된 행의 갯수가 담겨있음)
6. ResultSet으로 객체 담긴 데이터들을 하나씩 추출하여 vo 객체로 변환 or 트랜잭션 처리(SELECT가 아닌 DML문일 경우)
7. 다 쓴 JDBC용 객체 자원 반납(생성된 순서의 역순으로)
8. 결과를 Controller 반환


Servlet
> web.xml 파일
- 배포서술자(DD, Deployment Descriptor)라고 해서 웹 애플리케이션의 기본적인 설정을 위해 작성하는 파일
- 현재 웹 애플리케이션을 구동시키는 서버를 start할 때 가장 먼저 읽혀지는 파일

> welcome-file : 처음에 url로 현재 애플리케이션의 루트경로(contextpath)로 요청시 제일 먼저 보여지게 되는 메인페이지 지정해놓은 것
=> 127.0.0.1 = localhost
- 서버내의 구동중인 애플리케이션의 루트경로 context root : servlet
합치면 localhost:8081/sevlet 으로 요청시 WebContent 바로 아래에 있는 index 파일이 서비스

서블릿이란?
- 웹 서비스를 위한 자바 클래스를 말하며 자바를 사용해서 웹 페이지를 만들기 위해 필요한 기술이다.
- 사용자의 요청을 받아 처리하고 그에 해당하는 응답페이지를 만들어 다시 사용자에게 전송하는 역할을 하는 자바의 클래스
즉, 웹에서 동적인 java로 구현할 수 있게 도와주는 서버 사이드 렌더링 프로그램(WAS 서버에 의해 구동됨) java 클래스에서 웹 페이지 구현을 HTML이 포함된 구조라고 할 수 있다.(java 코드로 html을 구현)

GET 방식으로 요청 후 응답페이지 받아보기
특징 1. GET 방식으로 요청한 데이터는 url의 header 영역에 데이터들을 포함시켜 요청함
=> 사용자가 입력한 값이 url에 노출
=> 보안유지 x
=> 즉, 로그인이나 회원가입 같은 경우 GET 방식으로 작업하는게 부적합함

특징 2. Header 영역은 전송하는 데이터의 길이에 제한이 있음
=> 방대한 데이터를 담았을 경우 초과된 데이터는 절단
=> 즉, 게시판 작성같이 방대한 데이터가 포함된 경우 get 방식으로 작업하는게 부적합함

특징 3. URL에 데이터가 노출되기 때문에 즐겨찾기 기능을 사용하는데 있어서 적합하다.

1. form내의 제출버튼을 클릭시 form 태그 속성중 action에 작성된 url로 요청됨
<form action='/servlet/test1.do' method="get">

2. Servlet 요청 같은 경우 반드시 그 요청값이 현재 웹 애플리케이션의 contextpath(/servlet)뒤에 작성되어야함
    http://localhost:8081/servlet/test1.do

3-1 절대경로 방식 (action 속성의 속성값이 /로 시작되는 경우) : localhost:8081 뒤에 action에 지정한 속성값이 이어붙여지면서 요청이 들어감

3-2 상대경로방식(/가 아닌 문구로 시작되는 경우) : 현재 이 페이지가 보여질때의 url경로를 기준으로 마지막 위치의 /로부터 그 뒤에 action 속성의 속성값이 이어붙여지면서 요청이 들어감

input 태그 사용시 key 값은 반드시 서버에 넘겨줘야 하는데 key값 설정은 name 속성으로 한다.

get 방식은 제출을 하면 url에 내가 입력했던 정보가 모두 노출된다.

@WebServlet("경로지정")

protected void doGet => get 방식으로 들어왔을 때 응답 결과를 보여줌
Get 방식으로 요청했으면 현재 doGet가 호출됨
  - 첫번째 매개변수인 HttpServletRequest request에는 요청시 클라이언트가 전달한 내용들이 담김(입력한 값, 전송방식, 요청한 사용자의 ip, 쿠키정보, session 등...)

우선, 요청을 처리하기 위해 요청시 전달된 값들을 뽑는다.
request의 parameter 영역 안에 존재 -> 데이터들을 key value 세트로 담겨있다.
=> 따라서 reqyest의 parameter 영역으로부터 전달된 데이터를 뽑는 메소드를 사용

- request.getParameter("키값") : String => 무조건 문자열 자료형으로 반환
- request.getParameterValues("키값") : String[] => 무조건 문자열 배열 형태로 반환

request는 요청

 response는 객체를 통해 사용자에게 html 응답화면을 전달한다
출력할 내용은 문서형태의 html 파일이고, 문자셋은 utf-8이다.

체크박스처럼 여러개의 정보를 동일한 키값으로 전달받는 경우 반드시 배열형태로 받아야 한다.

클라이언트로부터 Servlet으로 요청이 들어오면 요청(Request)을 파악한 후 응답(Response)을 전달한다.
Servlet으로 들어온 요청을 텍스트(HTML) 형태로 응답을 보내려면 출력 스트림을 얻어야 한다.

PrintWriter out = resp.getWriter();
위 코드는 HttpServletResponse 인터페이스의 상위 인터페이스인 ServletResponse의 getWriter() 메소드를 호출하고 있다.
getWriter() 메소드는 java.io의 PrintWriter 클래스를 리턴 타입으로 한다.
PrintWriter 클래스는 간단한 설명하자면, 바이트를 문자 형태를 가지는 객체로 바꿔준다. 클라이언트에게 문자 형태로 응답을 하고 싶기 때문에 out이라는 PrintWriter 클래스 객체를 정의하고 getWriter() 메소드를 통해 인스턴스를 얻었다.

요약
- Servlet에서 클라이언트의 요청에 대한 응답 형태는 문자 도는 바이트가 될 수 있다.
- 클라이언트의 요청에 문자 형태로 응답하려면 데이터 흐름을 컨트롤 해야 한다. 즉 텍스트 형태로 응답을 보내도록 설정해야 한다
- HttpServletResponse 인터페이스의 상위 인터페이스인 ServletResponse의 getWriter() 메소드를 호출하면 스트림에 텍스트를 기록하는 것이 가능하다.

서블릿
장점 : java 코드 내에서 작성을 하기 때문에 자바에서 활용가능한 다양한 api를 사용하여 html 코드를 만들 수 있다.
단점 : 복잡하고, 혹시라도 html 페이지를 수정하고자 할 때 java 코드 내에서 수정이 이루어지기 때문에 수정된 내용을 다시 반영하고자한다면 서버를 재실행해야한다.

POST 방식으로 요청 후 응답페이지 받아보기
특징 1. POST 방식으로 요청한 데이터는 url의 Body 영역에 데이터를 포함시켜서 요청
=> 사용자가 입력한 값들이 url에 노출되지 않는다.
=> 보안유지가 가능함
=> 로그인이나, 회원가입 같은 경우 post 방식이 적합함

특징 2. Body영역은 전송하는 길이에 제한이 없음
=> 즉, 게시판 작성같은 경우 Post 방식으로 하는게 적합함

특징 3. 즐겨찾기는 가능하나 전달되는 데이터가 URL에 노출되지 않음

특징 4. 최대 요청 받는 시간이 존재해서 페이지 요청 및 대기시간이 있다.


POST Servlet 요청
1. Post방식의 요청의 경우 값을 뽑기전에 UTF-8 방식으로 인코딩을 변경해줘야 한다.
	- Post의 기본 인코딩 설정은 ISO-8859-1이다.

2. 요총초라 : Service - DAO - SQL문 실행
- 위의 요청처리를 다 했다는 가정 하에 사용자가 보게될 응답페이지 출력
- JSP(Java Server Page) : html 내에 java 코드를 쓸 수 있는 기술
- 응답페이지를 만드는 과정을 jsp에게 위임(forward)

단, 응답화면에서 필요로 하는 데이터를 꾸미기 위해 jsp에게 필요한 데이터를 넘겨줘야함
=> request에 attribute 영역에 담아서 보내준다.

=> Object 자료형으로 값이 들어감

<% ~ %> 영역
- 이구문은 스크립틀릿이라고 해서 jsp 문서 내에 자바 코드를 쓸 수 있는 영역
- 현재 이 jsp에서 필요로 하는 request의 atrribute에 담겨있음
- request.getAttribute("키값") : Object
- Object형식에서 내가 받고자 하는 자료형으로 강제 형변환 해서 담아주면 된다,.

JSP(Java Server Page)
: JSP란, HTML 형식 내에서 자바코드를 쓸 수 있는 자바언어로 서블릿(자바코드)에서 응답화면을 구현했던 복잡함을 보다 간단하게 해결 가능하다.
-> 즉,JSP의 가장 큰 장점은 Servlet에서는 비즈니스 로직 처리에만 집중하고 프레젠테이션 로직 처리는 JSP에서 집중하게끔 분리할 수 있다는 것

선언문 : &lt;%! %&gt;
멤버변수와 메소드 등을 선언하기 위해 사용

스클립틀릿 : &lt;% %&gt;
JSP에서 자바 코드를 기술하기 위한 제일 기본적인 표현법

표현식(출력식) : &lt;%= %&gt;
자바에서 작성한 값 혹은 메소드 호출결과를 "출력"하기 위해 사용

 스클립틀릿 : 이 안에 일반적인 자바 코드를 작성(변수 선언 및 초기화, 제어문 등..)

- 화면으로 출력하고자 한다면
스클립틀릿을 이용해서 출력 가능 : <% out.println(sum); %>
표현식(출력식) 으로도 출력 가능 : <%= sum %>

지시어
 page 지시어 : 현재의 jsp페이지를 처리하는데 필요한 각종 속성을 기술하는 부분

 language : 사용할 스크립트 언어 유형을 지정
contentType : 웹 브라우저가 받아볼 해당 페이지의 형식 및 인코딩 방식 지정
pageEncoding : jsp 파일에 기록된 자바코드의 인코딩방식 지정
import : 자바의 import와 같은 의미로 사용
errorPage : 해당 jsp상에서 오류가 발생했을 경우 보여줄 에러페이지의 경로 지정
isELIgnored : jsp상에서 EL표현식을 사용할지 여부를 지정(기본값 false)

Server-client Model
서버는 특정한 서비스를 제공하는 컴퓨터를, 클라이언트는 이러한 서비스를 이용하는 사용자를 말한다.

Web Server => 정적인것을 다룸.
WAS => Web Application Server의 약자로 사용자가 요청한 서비스의 결과를 스크립트 언어 등으로 가공하여 동적인 페이지 사용자게	에 보여주는 역할

WAS의 종류
- tomcat : Apache Software Fonudation에서 Servlet과 JSP를 통한 동적인 웹 문서를 처리하기 위해 만든 웹 애플리케이션 서버
- jeus 	 : 국산 WAS, 대용량 데이터 트랜잭션을 고성능으로 처리하며 개발 및 운영에 관한 기술 지원이 뛰어남

CGI = 웹 서버가 직접적으로 웹 프로그램을 실행하는 것
WAS = 웹 서버가 웹 애플리케이션 서버에 요청하면 웹 애플리케이션 서버가 해당되는 프로그램을 실행하는 방식
      한 프로그램에 여러 요청이 있는 경우 한 개의 프로그램을 실행하여 그 프로그램을 다수 요청 처리

서블릿 컨테이너
- 서블릿의 생명주기 관리(생성, 초기화, 소멸), HttpServletReqyest/HttpServletResponse 객체 생성, 요청에 따라 멀티 스레딩 구성, 전송 방식에 따라 동적으로 페이지 구성하는 작업 진행, 정적 로딩 처리

JSP 컨테이너
- JSP 파일을 다시 java 코드로 변경해주고 class 파일로 전환하여 메모리 공간에 로드한 뒤 실행 가능하게 만드는 작업 진행(Servlet화), 처리 결과를 HTML 파일로 만들어주는 작업 진행, 동적 로딩 처리

서블릿
- Server + Applet의 합성어로 java 언어를 이용하여 사용자의 요청을 받아 처리하고 그 결과를 다시 사용자에게 전송하는 역할의
  Class 파일을 말함. 즉, 웹에서 동적인 페이지를 java로 구현한 서버 측 프로그램

서블릿 설계 규약
1. 모든 서블릿은 javax.servlet.Servlet 인터페이스를 상속 받아 구현
2. 서블릿 구현 시 Servlet 인터페이스와 ServletConfig 인터페이스를 javax.servlet.GenericServlert에 구현
3. HTTP 프로토콜을 사용하는 서블릿은 javax.servlet.http.HttpServlet 클래스는 HttpServlet 클래스를 상속받음
4. 서블릿 Exception 처리를 하기 위해서는 javax.servlet.ServletException을 상속 받아야 한다.

서블릿 컨테이너
- 웹서버 또는 응용프로그램 서버의 일부로, 웹 서버에서 온 요청을 받아 서블릿 class를 관리하는 역할(생명주기)
  컨테이너의 서블릿에 대한 설정은 Deployment Descriptor(web.xml)파일 이용

배포 서술자
배포 서술자는 애플리케이션에 대한 전체 설정 정보를 가지고 있는 파일을 말하며 이 정보를 가지고 웹 컨테이너가 서블릿 구동, xml 파일로 요소(태그)로 이루어져있음
애플리케이션 폴더의 WEB-INF 폴더에 web.xml 파일이 배포 서술자이다.

설정 정보는 다양하다.
- Servlet 정의, Servlet 초기화 파라미터
- Session 설정 파라미터
- Servlet/JSP 매핑, MIME type 매핑
- 보안설정
- Welcome file list 설정
- 에퍼 페이지 리스트, 리소스, 환경변수

<web-app> : 루트 속성, 문법 식별자 및 버전 정보를 속성 값으로 설정
<context-param> : 웹 애플리케이션에서 공유하기 위한 파라미터 설정
<mime-mapping> : 특정 파일 다운로드 시 파일이 깨지는 현상 방지
<servlet> ~ <servlet-class>/<servlet-mapping> : 서블릿 매핑
<servlet> ~ <servlet-class> : 컨테이너에 서블릿 설정
ex. default : 공유 자원 제공 및 디렉토리 목록 제공
jsp : jsp컴파일과 실행 담당
<welcome-file-list> : 시작 페이지 설정
<filter> : 필터 정보 등록
<error-page> : 에러 발생 시 안내 페이지 설정
<session-config> : session 기간 설정
<listener> : 이벤트 처리

서블릿 매핑
- 클라이언트가 servlet에 접근할 때 원본 클래스 명이 아닌 다른 명칭으로 접근 시 사용
- 설정 방법은 web.xml과 @annotation을 이용하는 방법이 있음

@annotation 예시
@web-Servlet(“/매핑명칭”)
public class 서블릿명칭 extends HttpServlet{
// servlet code
}

서블릿 라이프 사이클
1. 첫 번째 요청일 경우, 객체를 생성하며 init() 메소드를 호출함
2. 이 후 작업이 실행될 때마다 service() 메소드가 요청한 HTTP Type에 따른 doGet(), doPost() 호출
3. 최종적으로 서블릿이 서비스 되지 않았을때 destroy() 호출


서블릿 구동
클라이언트 > web server > was > 서블릿 컨테이너 > was > 클라이언트


사용자 데이터 전송 방식
get 방식
- URL 창에 ? 뒤에 데이터를 입력하는 방법(쿼리스트링) 데이터가 여러 개일 경우 &로 묶어서 보냄 데이터 검색에 많이 사용하고 데이터 크기에 한계가 있으며 보안 취약하다,
POST방식
- BODY에 내용을 보내는 방식으로 데이터 크기에 제한이 없고 보안이 뛰어나다.

 doGet : client에서 데이터 전송 방식을 get방식으로 전송하면 호출되는 메소드
 doPost : client에서 데이터 전송 방식을 post방식으로 전송하면 호출되는 메소드
* 반드시 ServletException 처리 해야함









