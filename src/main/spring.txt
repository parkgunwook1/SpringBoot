resources 폴더의 static templates 폴더는 Spring Web이란 기능을 추가하면서 생기게 되는 폴더이다.,
Web의 주요 파일은 html을 해당 폴더에 넣으면 Spring web이 자동으로 인식해서 나의 서버로 웹페이지를 띄어주는 역할을 하는 곳이다.

application.properties는 데이터베이스 접속 설정처럼 외부의 설정을 정의하는 공간이다,
key=value 형식으로 사용해서 프로젝트내의 다른 파일에 key값을 사용하여 value를 불러올 수 있다.

Test 패키지
해당 Application이 하나 존재하는데 해당 Application은 서버를 실행시키기 위함이 아니고, 내가 만든 기능들이 잘 동작하는지 테스트해 보는 공간이다.

스프링 부트와 스프링의 큰 차이가 있다.

- 스프링부트는 내장톰켓이라 걍 실행 시키면 된다.

스프링은 톰켓을 추가로 설치해야하고 war파일로 패키징 한 뒤 톰켓에 넣어줘야 한다.
스프링은 본인이 사용할 라이브러리에 대해서 직접 진생성을 해줘야 하는데 스프링부트는 라이브러리한테 맡겨서 처리시킬 수 있다.

스프링은 설정이 너무 힘들다. 설정 자체도 어렵고 스프링으로 주로 웹 애플리케이션을 만든다.
그러면 톰캣에 war 패키징 한뒤 톰켓에 넣어줘야하는데 그게 너무 어렵다.
스프링은 설정하는게 절반이다 라는 말이 있었다.
위의 어려움때문에 스프링 부트가 나왔고 톰캣도 포함하고 있어서 설정할게 거의 없다.

스프링 프레임워크
- 핵심 기술 : 스프링 DI 컨테이너, AOP, 이벤트, 기타
- 웹 기술 : 스프링 MVC, 스프링 WebFlux
- 데이터 접근 기술 : 트랜잭션, JDBC, ORM 지원, XML 지원
- 기술통합 : 캐시, 이메일, 원격접근, 스케줄링
- 테스트 : 스프링 기반 테스트 지원
- 언어 : 코틀린, 그루비
- 최근에는 스프링 부트를 통해서 스프링 프레임워크의 기술들을 편리하게 사용한다.

스프링 부트
- 스프링을 편리하게 사용할 수 있도록 지원, 최근에는 기본으로 사용
- 단독으로 실행할 수 있는 스프링 애플리케이션을 쉽게 생성
- Tomcat 같은 웹 서버를 내장해서 별도의 웹 서버를 설치하지 않아도 됨
- 손쉬운 빌드 구성을 위한 starter 종속성 제공
- 스프링 3rd parth(외부) 라이브러리 자동 구성
- 메트릭, 상태 확인, 외부 구성 같은 프로덕션 준비 기능 제공
- 관례에 의한 간결한 설정

스프링 부트는 스프링 기반으로 편리하게 사용할 수 있는것, 별도로 존재하는것이 아니다.

핵심 개념
스프링은 핵심이 뭐고,왜 만들어졌는가?
- 스프링은 자바 언어 기반의 프레임워크
- 자바 언어의 가장 큰 특징 - 객체 지향 언어
- 스프링은 객체 지향 언어가 가진 강력한 특징을 살려내는 프레임워크
- 스프링은 좋은 객체 지향 애플리케이션을 개발할 수 있게 도와주는 프레임워크

좋은 객체지향은 무엇인가?
- 역할과 구현으로 분리, 즉 변경이 용이하고 유연성이 높아진다.
- 자동차의 추상적인 기능을 만들면 클라이언트는 조작하는 방법을 알기에 각종 자동차를 끌 수 있다.
- 클라이언트는 내부 구조를 몰라도 되고, 내부 구조가 변경되어도 영향을 받지 않는다.
- 역할은 "인터페이스"로 보면 되고, 구현은 "클래스 및 객체"라고 보면 된다.
- 구현보단 역할이 중요하다.

다형성의 본질
- 인터페이스를 구현한 객체 인스턴스를 실행 시점에 유연하게 변경할 수 있다.
- 클라이언트를 변경하지 않고, 서버의 구현 기능을 유연하게 변경할 수 있다.

역할과 구현을 분리(정리)
- 실세계의 역할과 구현이라는 편리한 컨셉을 다형성을 통해 객체 세상으로 가져올 수 있음
- 확장 가능한 설계
- 클라이언트에 영향을 주지 않는 변경 가능
- 인터페이스를 안정적으로 잘 설계하는것이 정말 중요

역할과 구현을 분리(한계)
- 역할(인터페이스) 자체가 변하면, 클라이언트, 서버 모두에 큰 변경이 발생한다.
- 자동차를 비행기로 변경해야 한다면? 대본 자체가 변경된다면?
- 인터페이스를 안정적으로 잘 설계하는 것이 중요

스프링과 객체 지향
- 다형성이 가장 중요하다.
- 스프링은 다형성을 극대화해서 이용할 수 있게 도와준다.
- 스프링에서 이야기하는 제어의 역전(IOC), 의존관계 주입(DI)은 다형성을 활용해서 역할과 구현을 편리하게 다룰 수 있도록 지원한다.


-------------------------------------------------------------------------------------------------------
좋은 객체 지향 설계의 5가지 원칙(SOLID)
클린코드로 유명한 로버트 마틴이 좋은 객체 지향 설계의 5가지 원칙을 정리

SRP : 단일 책임 원칙(single responsibility principle)
- 한 클래스는 하나의 책임만 가져야 한다.
- 하나의 책임이라는 것은 모호하다.
   - 클 수 있고, 작을 수 있다.
   - 문맥과 상황에 따라 다르다.
- 중요한 기준은 변경이다. 변경이 있을 때 파급 효과가 적으면 단일 책임 원칙을 잘 따른 것

OCP : 개방 폐쇄 원칙(open/closed principle)
- 소프트웨어 요소는 확장에는 열려 있으나 변경에는 닫혀 있어야 한다.
- 다형성을 활용!
- 인터페이스를 구현한 새로운 클래스 하나 만들어서 새로운 기능을 구현
   - MemberRepostiyory m = new MemoryMemberReposityory(); // 기조코드
   - MemberRepostiyory m = new jdbcMemberReposityory();  // 변경코드
- 구현 객체를 변경하려면 클라이언트 코드를 변경해야한다.
- 분명 다형성을 사용했지만 OCP 원칙을 지킬 수 없다.

LSP : 리스코프 치환 원칙(Liskov substitution principle)
- 프로그램의 객체는 프로그램의 정확성을 깨뜨리지 않으면서 하위 타입의 인스턴스로 바꿀 수 있어야한다.
- 다형성에서 하위 클래스는 인터페이스 규약을 다 지켜야 한다는 것, 다형성을 지원하기 위한 원칙, 인터페이스를 구현한 구현체는 믿고 사용하려면, 이 원칙이 필요하다.
- 단순히 컴파일에 성공하는 것을 넘어서는 이야기
예) 자동차 인터페이스의 엑셀은 앞으로 가라는 기능, 뒤로 가게 구현하려면 LSP 위반!!, 느리더라도 앞으로 가야한다.

ISP : 인터페이스 분리 원칙(Interface segregation principle)
- 특정 클라이언트를 위한 인터페이스 여러 개가 범용 인터페이스 하나보다 낫다.
- 자동차 인터페이스 -> 운전 인터페이스, 정비 인터페이스로 분리
- 사용자 클라이언트 -> 운전자 클라이언트, 정비사 클라이언트로 분리
- 분리하면 정비 인터페이스 자체가 변해도 운전자 클라이언트에 영향을 주지 않는다.

DIP : 외존과계 역전 원칙(Dependency inversion principle)
- 프로그래머는 "추상화에 의존해야지, 구체화에 의존하면 안된다." 의존성 주입은 이 원칙을 따르는 방법 중 하나다.
- 쉽게 이야기해서 구현 클래스에 의존하지 말고, 인터페이스에 의존하라는 뜻이다.
- 앞에서 이야기한 역할에 의존하게 해야 한다는 것과 같다. 객체 세상도 클라이언트가 인터페이스에 의존해야 유연하게 구현체를 변경할 수 있다. 구현체에 의존하게 되면 변경이 아주 어려워진다.
    - MembmerRepository m = new MemoryMemverRepository();   => DIP 위반.

정리
- 객체 지향의 핵심은 다형성
- 다형성 만으로는 쉽게 부품을 갈아 끼우듯이 개발할 수 없다.
- 다형성 만으로는 OCP, DIP를 지킬 수 없다.
- 그래서 무언가 더 필요하다.
객체지향 공부를 제대로한 사람이라면 누구나 다형성의 한계점이 있다는걸 느낀다.

--------------------------------------------------------------------------------------------------------------------------------------------
다시 스프링으로,

- 스프링은 다음 기술로 다형성 + OCP,DIP를 가능하게 지원
    - DI : 의존관계, 의존성 주입
    - DI 컨테이너 제공
- 클라이언트 코드의 변경 없이 기능 확장

-----------------------------------------------------------------------------------------
스프링 핵심 원리 이해2 = 객체지향 원리 적용

우선 역할과 구현을 인터페이스와 클래스 및 객체로 나눠서 잘 구현을 했다.
역할과 구현을 나눠서 해본 장점으로는 각 기능들을 나눠서 구현하니 변경사항이 있다면 해당 로직만 바꾸면 된다.
만약 변경사항이 있는데 구분을 안했을 시에는 여러 클래스들을 수정을 해야 함으로 유지보수가 어렵다는 것을 직접 느꼈다.

하지만 역할과 구현을 나누고, 다형성을 적용했지만, 기존에 작성한 코드들은 DI와 OCP 원칙을 지키지 못했다.
DI와 OCP를 지키기 위해서 각 클래스의 필드를 생성하고, 생성자를 생성함으로써 의존성 주입을 시켜줬다.
AppConfig 클래스를 생성함으로 의존성 주입을 시켜줬다.


Ioc, DI, 컨테이너

제어의 역전 Ioc
- 프로그램의 제어 흐름을 직접 제어하는 것이 아니라 외부에서 관리하는 것을 제어의 역전이라 한다.

프레임워크 vs 라이브러리
- 프레임워크 내가 작성한 코드를 제어하고, 대신 실행하면 그것은 프레임워크가 맞다. (Junit)
- 반면에 내가 작성한 코드가 직접 제어의 흐름을 담당한다면 그것은 프레임워크가 아니라 라이브러리다.

의존관계 주입 DI
- OrderServiceImpl 은 DiscountPolicy 인터페이스에 의존한다. 실제 어떤 구현 객체가 사용될지 모른다.
- 의존관계는 "정적인 클래스 의존 관계와, 실행 시점에 결정되는 동적인 객체(인스턴스) 의존 관계" 둘을 분리해서 생각해야 한다.

IOC 컨테이너, DI 컨테이너
- AppConfig 처럼 객체를 생성하고 관리하면서 의존관계를 연결해주는 것을 ioc 컨테이너 도는 di 컨테이너라 한다.
- 의존관계 주입에 초점을 맞추어 최근에는 주로 DI 컨테이너라 한다.
- 도는 어샘블러, 오브젝트 팩토리 등으로 불리기도 한다.


스프링으로 전환하기

스프링 컨테이너
- ApplicationContext를 스프링 컨테이너라 한다.
- 기존에는 개발자가 AppConfig를 통해서 객체를 생성하고 DI를 했지만, 이제부터는 스프링 컨테이너를 통해서 이용한다.
- 스프링 컨테이너는 @Configuration이 붙은 AppConfig를 설정(구성) 정보로 사용한다.
   여기서 @Bean이라 적힌 메서드를 모두 호출해서 반환된 객체를 스프링 컨테이너에 등록한다.
   이렇게 스프링 컨테이너에 등록된 객체를 스프링 빈이라 한다.
- 스프링 빈은 @Bean이 붙은 메서드의 명을 스프링 빈의 이름으로 사용한다. (memberService, orderService)
- 이전에는 개발자가 필요한 객체를 AppConfig를 사용해서 직접 조회했지만, 이제부터는 스프링 컨테이너를 통해서 필요한
  스프링 빈(객체)를 찾아야 한다. 스프링 빈은 applicationContext.getBean() 메서드를 사용해서 찾을 수 있다.
- 기존에는 개발자가 직접 자바코드로 모든 것을 했다면 이제부터는 스프링 컨테이너에 객체를 스프링 빈으로 등록하고,
  스프링 컨테이너에서 스프링 빈을 찾아서 사용하도록 변경되었다.
------------------------------------------------------------

섹션 4

스프링 컨테이너 생성
- 스프링 컨테이너가 생성되는 과정을 알아보자
ApplicationContext applicationContext = new AnnotationConfigApplicationContext(AppConfig.class);
- ApplicationContext를 스프링 컨테이너라 한다.
- ApplicationContext는 인터페이스다.
- 스프링 컨테이너는 XML 기반으로 만들 수 있고, 애노테이션 기반의 자바 설정 클래스로 만들 수 있다.
- 직전에 AppConfig를 사용했던 방식이 애노테이션 기반의 자바 설정 클래스로 스프링 컨테이너를 만든 것이다.

"참고" : 더 정확히는 스프링 컨테이너를 부를 때 BeanFactory, ApplicationContext로 구분해서 이야기한다.
      BeanFactory를 직접 사용하는 경우는 거의 없으므로 일반적으로, ApplicationContext를 스프링 컨테이너라 한다.

스프링 컨테이너의 생성과정
1. 스프링 컨테이너 생성 (AppConfig.class) =>  스프링 컨테이너
1-2. 스프링 컨테이너(스프링 빈 저장소)
     => 빈 저장소는 빈 이름과, 빈객체가 있다. 키는 빈 이름, 값은 빈 객체가 된다.
- new AnootationConfigApplicationContext(AppConfig.class)
- 스프링 컨테이너를 생성할 때는 구성 정보를 지정해주어야 한다.
- 여기서는 AppConfig.class를 구성 정보로 지정했다.

2. 스프링 빈 등록
- 스프링 컨테이너는 파라미터로 넘어온 설정 클래스 정보를 사용해서 스프링 빈을 등록한다.

"빈 이름"
- 빈 이름은 메서드 이름을 사용한다.
- 빈 이름을 직접 부여할 수 도 있다.
    - @Bean (name = "memberService2")
주의 : 빈 이름은 항상 다른 이름을 부여 해야 한다. 같은 이름을 부여하면, 다른 빈이 무시되거나, 기존 빈을 덮어버리거나 설정에 따라 오류가 발생한다.

3. 스프링 빈 의존관계 설정 - 준비

4. 스프링 빈 의존관계 설정 - 완료
- 스프링 컨테이너는 설정 정보를 참고해서 의존관계를 주입(DI)한다.
- 단순히 자바 코드를 호출하는 것 같지만, 차이가 있다. 이 차이는 뒤에 싱글턴 컨테이너에서 설명한다.

"참고" : 스프링 빈을 생성하고, 의존관계를 주입하는 단계가 나누어져 있다. 그런데 이렇게 자바 코드로 스프링 빈을 등록하면
        생성자를 호출하면서 의존관계 주입도 한번에 처리된다. 자세한 내용은 의존관계 자동 주입에서 다시 설명하겠다.

"정리" : 스프링 컨테이너를 생성하고, 설정(구성) 정보를 참고해서 스프링 빈도 등록하고, 의존관계도 설정했다.










