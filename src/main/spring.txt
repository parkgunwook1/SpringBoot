resources 폴더의 static templates 폴더는 Spring Web이란 기능을 추가하면서 생기게 되는 폴더이다.,
Web의 주요 파일은 html을 해당 폴더에 넣으면 Spring web이 자동으로 인식해서 나의 서버로 웹페이지를 띄어주는 역할을 하는 곳이다.

application.properties는 데이터베이스 접속 설정처럼 외부의 설정을 정의하는 공간이다,
key=value 형식으로 사용해서 프로젝트내의 다른 파일에 key값을 사용하여 value를 불러올 수 있다.

Test 패키지
해당 Application이 하나 존재하는데 해당 Application은 서버를 실행시키기 위함이 아니고, 내가 만든 기능들이 잘 동작하는지 테스트해 보는 공간이다.

스프링 부트와 스프링의 큰 차이가 있다.

- 스프링부트는 내장톰켓이라 걍 실행 시키면 된다.

스프링은 톰켓을 추가로 설치해야하고 war파일로 패키징 한 뒤 톰켓에 넣어줘야 한다.
스프링은 본인이 사용할 라이브러리에 대해서 직접 진생성을 해줘야 하는데 스프링부트는 라이브러리한테 맡겨서 처리시킬 수 있다.

스프링은 설정이 너무 힘들다. 설정 자체도 어렵고 스프링으로 주로 웹 애플리케이션을 만든다.
그러면 톰캣에 war 패키징 한뒤 톰켓에 넣어줘야하는데 그게 너무 어렵다.
스프링은 설정하는게 절반이다 라는 말이 있었다.
위의 어려움때문에 스프링 부트가 나왔고 톰캣도 포함하고 있어서 설정할게 거의 없다.

스프링 프레임워크
- 핵심 기술 : 스프링 DI 컨테이너, AOP, 이벤트, 기타
- 웹 기술 : 스프링 MVC, 스프링 WebFlux
- 데이터 접근 기술 : 트랜잭션, JDBC, ORM 지원, XML 지원
- 기술통합 : 캐시, 이메일, 원격접근, 스케줄링
- 테스트 : 스프링 기반 테스트 지원
- 언어 : 코틀린, 그루비
- 최근에는 스프링 부트를 통해서 스프링 프레임워크의 기술들을 편리하게 사용한다.

스프링 부트
- 스프링을 편리하게 사용할 수 있도록 지원, 최근에는 기본으로 사용
- 단독으로 실행할 수 있는 스프링 애플리케이션을 쉽게 생성
- Tomcat 같은 웹 서버를 내장해서 별도의 웹 서버를 설치하지 않아도 됨
- 손쉬운 빌드 구성을 위한 starter 종속성 제공
- 스프링 3rd parth(외부) 라이브러리 자동 구성
- 메트릭, 상태 확인, 외부 구성 같은 프로덕션 준비 기능 제공
- 관례에 의한 간결한 설정

스프링 부트는 스프링 기반으로 편리하게 사용할 수 있는것, 별도로 존재하는것이 아니다.

핵심 개념
스프링은 핵심이 뭐고,왜 만들어졌는가?
- 스프링은 자바 언어 기반의 프레임워크
- 자바 언어의 가장 큰 특징 - 객체 지향 언어
- 스프링은 객체 지향 언어가 가진 강력한 특징을 살려내는 프레임워크
- 스프링은 좋은 객체 지향 애플리케이션을 개발할 수 있게 도와주는 프레임워크

좋은 객체지향은 무엇인가?
- 역할과 구현으로 분리, 즉 변경이 용이하고 유연성이 높아진다.
- 자동차의 추상적인 기능을 만들면 클라이언트는 조작하는 방법을 알기에 각종 자동차를 끌 수 있다.
- 클라이언트는 내부 구조를 몰라도 되고, 내부 구조가 변경되어도 영향을 받지 않는다.
- 역할은 "인터페이스"로 보면 되고, 구현은 "클래스 및 객체"라고 보면 된다.
- 구현보단 역할이 중요하다.

다형성의 본질
- 인터페이스를 구현한 객체 인스턴스를 실행 시점에 유연하게 변경할 수 있다.
- 클라이언트를 변경하지 않고, 서버의 구현 기능을 유연하게 변경할 수 있다.

역할과 구현을 분리(정리)
- 실세계의 역할과 구현이라는 편리한 컨셉을 다형성을 통해 객체 세상으로 가져올 수 있음
- 확장 가능한 설계
- 클라이언트에 영향을 주지 않는 변경 가능
- 인터페이스를 안정적으로 잘 설계하는것이 정말 중요

역할과 구현을 분리(한계)
- 역할(인터페이스) 자체가 변하면, 클라이언트, 서버 모두에 큰 변경이 발생한다.
- 자동차를 비행기로 변경해야 한다면? 대본 자체가 변경된다면?
- 인터페이스를 안정적으로 잘 설계하는 것이 중요

스프링과 객체 지향
- 다형성이 가장 중요하다.
- 스프링은 다형성을 극대화해서 이용할 수 있게 도와준다.
- 스프링에서 이야기하는 제어의 역전(IOC), 의존관계 주입(DI)은 다형성을 활용해서 역할과 구현을 편리하게 다룰 수 있도록 지원한다.


-------------------------------------------------------------------------------------------------------
좋은 객체 지향 설계의 5가지 원칙(SOLID)
클린코드로 유명한 로버트 마틴이 좋은 객체 지향 설계의 5가지 원칙을 정리

SRP : 단일 책임 원칙(single responsibility principle)
- 한 클래스는 하나의 책임만 가져야 한다.
- 하나의 책임이라는 것은 모호하다.
   - 클 수 있고, 작을 수 있다.
   - 문맥과 상황에 따라 다르다.
- 중요한 기준은 변경이다. 변경이 있을 때 파급 효과가 적으면 단일 책임 원칙을 잘 따른 것

OCP : 개방 폐쇄 원칙(open/closed principle)
- 소프트웨어 요소는 확장에는 열려 있으나 변경에는 닫혀 있어야 한다.
- 다형성을 활용!
- 인터페이스를 구현한 새로운 클래스 하나 만들어서 새로운 기능을 구현
   - MemberRepostiyory m = new MemoryMemberReposityory(); // 기조코드
   - MemberRepostiyory m = new jdbcMemberReposityory();  // 변경코드
- 구현 객체를 변경하려면 클라이언트 코드를 변경해야한다.
- 분명 다형성을 사용했지만 OCP 원칙을 지킬 수 없다.

LSP : 리스코프 치환 원칙(Liskov substitution principle)
- 프로그램의 객체는 프로그램의 정확성을 깨뜨리지 않으면서 하위 타입의 인스턴스로 바꿀 수 있어야한다.
- 다형성에서 하위 클래스는 인터페이스 규약을 다 지켜야 한다는 것, 다형성을 지원하기 위한 원칙, 인터페이스를 구현한 구현체는 믿고 사용하려면, 이 원칙이 필요하다.
- 단순히 컴파일에 성공하는 것을 넘어서는 이야기
예) 자동차 인터페이스의 엑셀은 앞으로 가라는 기능, 뒤로 가게 구현하려면 LSP 위반!!, 느리더라도 앞으로 가야한다.

ISP : 인터페이스 분리 원칙(Interface segregation principle)
- 특정 클라이언트를 위한 인터페이스 여러 개가 범용 인터페이스 하나보다 낫다.
- 자동차 인터페이스 -> 운전 인터페이스, 정비 인터페이스로 분리
- 사용자 클라이언트 -> 운전자 클라이언트, 정비사 클라이언트로 분리
- 분리하면 정비 인터페이스 자체가 변해도 운전자 클라이언트에 영향을 주지 않는다.

DIP : 외존과계 역전 원칙(Dependency inversion principle)
- 프로그래머는 "추상화에 의존해야지, 구체화에 의존하면 안된다." 의존성 주입은 이 원칙을 따르는 방법 중 하나다.
- 쉽게 이야기해서 구현 클래스에 의존하지 말고, 인터페이스에 의존하라는 뜻이다.
- 앞에서 이야기한 역할에 의존하게 해야 한다는 것과 같다. 객체 세상도 클라이언트가 인터페이스에 의존해야 유연하게 구현체를 변경할 수 있다. 구현체에 의존하게 되면 변경이 아주 어려워진다.
    - MembmerRepository m = new MemoryMemverRepository();   => DIP 위반.

정리
- 객체 지향의 핵심은 다형성
- 다형성 만으로는 쉽게 부품을 갈아 끼우듯이 개발할 수 없다.
- 다형성 만으로는 OCP, DIP를 지킬 수 없다.
- 그래서 무언가 더 필요하다.
객체지향 공부를 제대로한 사람이라면 누구나 다형성의 한계점이 있다는걸 느낀다.

--------------------------------------------------------------------------------------------------------------------------------------------
다시 스프링으로,

- 스프링은 다음 기술로 다형성 + OCP,DIP를 가능하게 지원
    - DI : 의존관계, 의존성 주입
    - DI 컨테이너 제공
- 클라이언트 코드의 변경 없이 기능 확장

-----------------------------------------------------------------------------------------
스프링 핵심 원리 이해2 = 객체지향 원리 적용

우선 역할과 구현을 인터페이스와 클래스 및 객체로 나눠서 잘 구현을 했다.
역할과 구현을 나눠서 해본 장점으로는 각 기능들을 나눠서 구현하니 변경사항이 있다면 해당 로직만 바꾸면 된다.
만약 변경사항이 있는데 구분을 안했을 시에는 여러 클래스들을 수정을 해야 함으로 유지보수가 어렵다는 것을 직접 느꼈다.

하지만 역할과 구현을 나누고, 다형성을 적용했지만, 기존에 작성한 코드들은 DI와 OCP 원칙을 지키지 못했다.
DI와 OCP를 지키기 위해서 각 클래스의 필드를 생성하고, 생성자를 생성함으로써 의존성 주입을 시켜줬다.
AppConfig 클래스를 생성함으로 의존성 주입을 시켜줬다.


Ioc, DI, 컨테이너

제어의 역전 Ioc
- 프로그램의 제어 흐름을 직접 제어하는 것이 아니라 외부에서 관리하는 것을 제어의 역전이라 한다.

프레임워크 vs 라이브러리
- 프레임워크 내가 작성한 코드를 제어하고, 대신 실행하면 그것은 프레임워크가 맞다. (Junit)
- 반면에 내가 작성한 코드가 직접 제어의 흐름을 담당한다면 그것은 프레임워크가 아니라 라이브러리다.

의존관계 주입 DI
- OrderServiceImpl 은 DiscountPolicy 인터페이스에 의존한다. 실제 어떤 구현 객체가 사용될지 모른다.
- 의존관계는 "정적인 클래스 의존 관계와, 실행 시점에 결정되는 동적인 객체(인스턴스) 의존 관계" 둘을 분리해서 생각해야 한다.

IOC 컨테이너, DI 컨테이너
- AppConfig 처럼 객체를 생성하고 관리하면서 의존관계를 연결해주는 것을 ioc 컨테이너 도는 di 컨테이너라 한다.
- 의존관계 주입에 초점을 맞추어 최근에는 주로 DI 컨테이너라 한다.
- 도는 어샘블러, 오브젝트 팩토리 등으로 불리기도 한다.


스프링으로 전환하기

스프링 컨테이너
- ApplicationContext를 스프링 컨테이너라 한다.
- 기존에는 개발자가 AppConfig를 통해서 객체를 생성하고 DI를 했지만, 이제부터는 스프링 컨테이너를 통해서 이용한다.
- 스프링 컨테이너는 @Configuration이 붙은 AppConfig를 설정(구성) 정보로 사용한다.
   여기서 @Bean이라 적힌 메서드를 모두 호출해서 반환된 객체를 스프링 컨테이너에 등록한다.
   이렇게 스프링 컨테이너에 등록된 객체를 스프링 빈이라 한다.
- 스프링 빈은 @Bean이 붙은 메서드의 명을 스프링 빈의 이름으로 사용한다. (memberService, orderService)
- 이전에는 개발자가 필요한 객체를 AppConfig를 사용해서 직접 조회했지만, 이제부터는 스프링 컨테이너를 통해서 필요한
  스프링 빈(객체)를 찾아야 한다. 스프링 빈은 applicationContext.getBean() 메서드를 사용해서 찾을 수 있다.
- 기존에는 개발자가 직접 자바코드로 모든 것을 했다면 이제부터는 스프링 컨테이너에 객체를 스프링 빈으로 등록하고,
  스프링 컨테이너에서 스프링 빈을 찾아서 사용하도록 변경되었다.
------------------------------------------------------------

섹션 4

스프링 컨테이너 생성
- 스프링 컨테이너가 생성되는 과정을 알아보자
ApplicationContext applicationContext = new AnnotationConfigApplicationContext(AppConfig.class);
- ApplicationContext를 스프링 컨테이너라 한다.
- ApplicationContext는 인터페이스다.
- 스프링 컨테이너는 XML 기반으로 만들 수 있고, 애노테이션 기반의 자바 설정 클래스로 만들 수 있다.
- 직전에 AppConfig를 사용했던 방식이 애노테이션 기반의 자바 설정 클래스로 스프링 컨테이너를 만든 것이다.

"참고" : 더 정확히는 스프링 컨테이너를 부를 때 BeanFactory, ApplicationContext로 구분해서 이야기한다.
      BeanFactory를 직접 사용하는 경우는 거의 없으므로 일반적으로, ApplicationContext를 스프링 컨테이너라 한다.

스프링 컨테이너의 생성과정
1. 스프링 컨테이너 생성 (AppConfig.class) =>  스프링 컨테이너
1-2. 스프링 컨테이너(스프링 빈 저장소)
     => 빈 저장소는 빈 이름과, 빈객체가 있다. 키는 빈 이름, 값은 빈 객체가 된다.
- new AnootationConfigApplicationContext(AppConfig.class)
- 스프링 컨테이너를 생성할 때는 구성 정보를 지정해주어야 한다.
- 여기서는 AppConfig.class를 구성 정보로 지정했다.

2. 스프링 빈 등록
- 스프링 컨테이너는 파라미터로 넘어온 설정 클래스 정보를 사용해서 스프링 빈을 등록한다.

"빈 이름"
- 빈 이름은 메서드 이름을 사용한다.
- 빈 이름을 직접 부여할 수 도 있다.
    - @Bean (name = "memberService2")
주의 : 빈 이름은 항상 다른 이름을 부여 해야 한다. 같은 이름을 부여하면, 다른 빈이 무시되거나, 기존 빈을 덮어버리거나 설정에 따라 오류가 발생한다.

3. 스프링 빈 의존관계 설정 - 준비

4. 스프링 빈 의존관계 설정 - 완료
- 스프링 컨테이너는 설정 정보를 참고해서 의존관계를 주입(DI)한다.
- 단순히 자바 코드를 호출하는 것 같지만, 차이가 있다. 이 차이는 뒤에 싱글턴 컨테이너에서 설명한다.

"참고" : 스프링 빈을 생성하고, 의존관계를 주입하는 단계가 나누어져 있다. 그런데 이렇게 자바 코드로 스프링 빈을 등록하면
        생성자를 호출하면서 의존관계 주입도 한번에 처리된다. 자세한 내용은 의존관계 자동 주입에서 다시 설명하겠다.

"정리" : 스프링 컨테이너를 생성하고, 설정(구성) 정보를 참고해서 스프링 빈도 등록하고, 의존관계도 설정했다.


모든 빈 출력하기
- 실행하면 스프링에 등록된 모든 빈 정보를 출력할 수 있다.
- ac.getBeanDefinitionNames() : 스프링에 등록된 모든 빈 이름을 조회한다.
- ac.getBean() : 빈 이름으로 빈 객체(인스턴스)를 조회한다.
애플리케이션 빈 출력하기
- 스프링 내부에서 사용하는 빈 제외하고, 내가 등록한 빈만 출력해보자
- 스프링 내부에서 사용하는 빈은 getRole()로 구분할 수 있다.
   - Role ROLE_APPLICATION : 직접 등록한 애플리케이션 빈
   - Role ROLE_INFRASTRUCTURE : 스프링 내부에서 사용하는 빈


스프링 빈 조회 - 기본

스프링 컨테이너에서 스프링 빈을 찾는 가장 기본적인 조회 방법
- ac.getBean(빈이름, 타입)
- ac.getBean(타입)
- 조회 대상 스프링 빈이 없으면 예외 발생 => NpSuchBeanDefunitaionException : No bean named ~


스프링 빈 조회 - 동일한 타입이 둘 이상
- 타입으로 조회시 같은 타입의 스프링 빈이 둘 이상이면 오류가 발생한다. 이때는 빈 이름을 지정하자.
- ac.getBeanOfType()을 사용하면 해당 타입의 모든 빈을 조회할 수 있다.


스프링 빈 조회 - 상속관계
- 부모 타입으로 조회하면, 자식 타입도 함께 조회한다.
- 그래서 모든 자바 객체의 최고 부모인 Object 타입으로 조회하면, 모든 스프링 빈을 조회한다.


BeanFactory와 ApplicationContext

BeanFactory
- 스프링 컨테이너의 최상위 인터페이스다.
- 스프링 빈을 관리하고 조회하는 역할을 담당한다.
- getBean()을 제공한다
- 지금까지 우리가 사용했던 대부분의 기능은 BeanFactory가 제공하는 기능이다.

ApplicationContext
- BeanFactory 기능을 모두 상속받아서 제공한다.
- 빈을 관리하고 검색하는 기능을 BeanFactory가 제공해주는데, 그러면 둘의 차이는 뭘까?
- 애플리케이션을 개발할 때는 빈은 관리하고 조회하는 기능은 물론이고, 수 많은 부가기능이 필요하다.

ApplicationContext가 제공하는 부가기능
- 메시지소스를 활용한 국제화 기능
    - 예를 들어서 한국에서 들어오면 한국어로, 영어권에서 들어오면 영어로 출력
- 환경변수
    - 로컬, 개발, 운영등을 구분해서 처리
- 애플리케이션 이벤트
    - 이벤트를 발행하고 구독하는 모델을 편리하게 지원
- 편리한 리소스 조회
    - 파일, 클래스패스, 외부 등에서 리소스를 편리하게 조회

정리
- ApplicationContext는 BeanFactory의 기능을 상속받는다.
- ApplicationContext는 빈 관리기능 + 편리한 부가 기능을 제공한다.
- BeanFactory를 직접 사용할 일은 거의 없다. 부가기능이 포함된 ApplicationContext를 사용한다.
- BenaFactory나 ApplicationContext를 스프링 컨테이너라 한다.


다양한 설정 형식 지원 - 자바 코드, XML
- 스프링 컨테이너는 다양한 형식의 설정 정보를 받아드릴 수 있게 유연하게 설계되어 있다.
   - 자바 코드, XML, Groovy 등등

애노테이션 기반 자바 코드 설정 사용
- 지금까지 우리가 사용한 방식들은
- new AnnotationConfigApplicationContext(AppConfig.class)
- AnnotationConfigApplicationContext 클래스를 사용하면 자바 코드로된 설정 정보를 넘기면 된다.

XML 설정 사용
- 최근에는 스프링 부트를 많이 사용하면서 XML 기반의 설정은 잘 사용하지 않는다. 아직 많은 레거시 프로젝트 들이 XML로 되어
  잇고, 또 XML을 사용하면 컴파일 없이 빈 설정 정보를 변경할 수 있는 장점도 있으므로 한번쯤 배워두는 것도 괜찮다.
- GenericXmlApplicationContext를 사용하면서 xml 설정 파일을 넘기면 된다.


스프링 빈 설정 메타 정보 - BeanDefinition
- 스프링은 어떻게 이런 다양한 설정 형식을 지원하는 것일까? 그 중심에는 BeanDefinition 이라는 추상화가 있다.
- 쉽게 이야기해서 역할과 구현을 개념적으로 나눈 것이다.
     - xml을 읽어서 BeanDefinition을 만들면 된다.
     - 자바 코드를 읽어서 BeanDefunutauin을 만들면 된다.
     - 스프링 컨테이너는 자바 코드인지, xml인지 몰라도 된다. 오직 BeanDefinition만 알면 된다.
- BeanDefinition을 빈 설정 메타정보라 한다.
     - @Bean, <bean> 당 각각 하나씩 메타 정보가 생성된다.
- 스프링 컨테이너는 이 메타정보를 기반으로 스프링 빈을 생성한다.

코드로 깊이있게 들어가보면
- ApplicationContext를 상속받고 있는 AnnotationConfigApplicationContext는 AnnotateBeanDefinitionReader를
  사용해서 AppConfig.class를 읽고 BeanDefinition을 생성한다.
- ApplicationContext를 상속받고 있는GenericXmlApplicationContext는 XmlBeanDefinitionReader를 사용해서
  appConfig.xml 설정정보를 읽고 BeanDefinition을 생성한다.
- 새로운 형식의 설정 정보가 추가되면 XxxBeanDefinitionReader를 만들어서 BeanDefinition을 생성하면 된다.

BeanDefinition 정보
- BeanClassName : 생성할 빈의 클래스 명(자바 설정처럼 팩토리 역할의 빈을 사용하면 없음)
- factoryBeanName : 팩토리 역할의 빈을 사용할 경우 이름, 예) appConfig
- factoryMethodName : 빈을 생성할 팩토리 메서드 지정, 예) memberService
- Scope : 싱글톤(기본값)
- lazyInit : 스프링 컨테이너를 생성할 때 빈을 생성하는 것이 아니라, 실제 빈을 사용할 때 까지 최대한 생성을 지연처리 하는지 여부
- lnitMethodName : 빈을 생성하고, 의존관계를 적용한 뒤에 호출되는 초기화 메서드 명
- DestoryMethodName : 빈의 생명주기가 끝나서 제거하기 직전에 호출되는 메서드 명
- Constructor arguments, Properties : 외존관계 주입에서 사용한다 (자바 설정 처럼 팩토리 역할의 빈을 사용하면 없음)

정리
- BeanDefinition을 직접 생성해서 스프링 컨테이너에 등록할 수도 있다. 하지만 실무에서 BeanDefinition을
  직접 정의하거나 사용할일은 거의 없다. > 어려우면 그냥 넘어가도됨.
- BeanDefinition에 대해서는 너무 깊이있게 이해하기 보다는, 스프링이 다양한 형태의 설정 정보를 BeanDefinition으로 추상화
  해서 사용하는 것 정도만 이해하면 된다.
- 가끔 스프링 코드나 스프링 관련 오픈 소스의 코드를 볼 때, BeanDefinition 이라는 것이 보일때가 있다. 이때 이러한 메커니즘을 떠올리면 된다.

--------------------------------------------------------------------------------------------------------------------------------

섹션 5 - 싱글톤 컨테이너

웹 애플리케이션과 싱글톤
- 스프링은 태생이 기업용 온라인 서비스 기술을 지원하기 위해 탄생했다.
- 대부분의 스프링은 에플리케이션은 웹 애플리케이션이다. 물론 웹이 아닌 애플리케이션 개발도 얼마든지 개발할 수 있다.
- 웹 애플리케이션은 보통 여러 고객이 동시에 요청을 한다.

- 우리가 만들었던 스프링 없는 순수한 DI 컨테이너인 AppConfig는 요청을 할 때 마다 객체를 새로 생성한다.
- 고객 트래픽이 초당 100이 나오면 초당 100개 객체가 생성되고 소멸된다 -> 메모리 낭비가 심하다,
- 해결방안은 해당 객체가 딱 1개만 생성되고, 공유하도록 설계하면 된다. -> 싱글톤 패턴


싱글톤 패턴
- 클래스의 인스턴스가 딱 1개만 생성되는 것을 보장하는 디자인 패턴이다.
- 그래서 객체 인스턴스를 2개 이상 생성하지 못하도록 막아야한다.
    - private 생성자를 사용해서 외부에서 임의로 new 키워드를 사용하지 못하도록 막아야 한다.
    싱글톤 패턴을 사용하면 수많은 단점들이 있다.

단점들을 없애면서 사용할 수 있는 방법은 "싱글톤 컨테이너" 이다.

싱글톤 컨테이너
- 스프링 컨테이너는 싱글톤 패턴의 문제점을 해결하면서, 객체 인스턴스를 싱글톤(1개만 생성)으로 관리한다.
  지금까지 우리가 학습한 스프링 빈이 싱글톤으로 관리되는 빈.

- 스프링 컨테이너는 싱글턴 패턴 적용하지 않아도, 객체 인스턴스를 싱글톤으로 관리한다.
- 스프링 컨테이너는 싱글톤 컨테이너 역할을 한다. 싱글톤 객체를 생성하고 관리하는 기능을 싱글톤 레지스트리라 한다.
- 스프링 컨테이너의 기능 덕분에 싱글턴 패턴의 모든 단점을 해결하면서 객체를 싱글톤으로 유지할 수 있다.
     - 싱글톤 패턴을 위한 지저분한 코드 들어가지 않아도된다.
     - DIP, OCP, 테스트, private 생성자로부터 자유롭게 싱글톤 사용할 수 있다.


정리
- @Bean만 사용해도 스프링 빈으로 등록되지만, 싱글톤을 보장하지 않는다.
        - memberRepository() 처럼 의존관계 주입이 필요해서 메서드를 직접 호출할 때 싱글톤을 보장하지 않는다.
- 크게 고민할 것이 없다. 스프링 설정 정보는 항상 @Configuration을 사용하자.

---------------------------------------------------------------------------------------
6. 컴포넌트 스캔

컴포넌트 스캔과 의존관계 자동 주입 시작하기
- 지금까지 스프링 빈을 등록할 때는 자바 코드의 @Bean이나 XML의 <bean> 등을 통해서 설정 정보에 직접 등록할 스프링 빈을 나열했다.
- 이렇게 등록해야 할 스프링 빈이 수십개가 되면 일일이 등록하기 귀찮고, 설정 정보도 커지고, 누락하는 문제도 발생한다.
- 그래서 스프링은 설정 정보가 없어도 자동으로 스프링 빈을 등록하는 컴포넌트 스캔이라는 기능을 제공한다.
- 또 의존관계도 자동으로 주입하는 @Autowired 라는 기능도 제공한다.

컴포넌트 스캔은 이름 그대로 @Component 애노테이션이 붙은 클래스를 스캔해서 스프링 빈으로 등록한다.
참고 : @Configuration 컴포넌트 스캔이 대상이 된 이유도 소스코드 열어보면 @Component 애노테이션이 붙어있기 때문이다.

@Autowired를 사용하면 생성자에서 여러 의존관계도 한번에 주입받을 수 있다.

1.@ComponentScan
- @ComponentScan은 @Component가 붙은 모든 클래스를 스프링 빈으로 등록한다.
- 이때 스프링 빈의 기본 이름은 클래스명으로 사용하되 맨 앞글자만 소문자를 사용한다.
       - 빈 이름 기본 전력 : MemberServiceImpl 클래스 -> memberServiceImpl
       - 빈 이름 직접 지정 : 만약 스프링 빈의 이름을 직접 지정하고 싶으면 @Component("memberServiceImpl") 이름을 부여하면 된다.

2.@Autowired 의존관계 자동 주입
- 생성자에 @Autowired를 지정하면, 스프링 컨테이너가 자동으로 해당 스프링 빈을 찾아서 주입한다.
- 이때 기본 조회 전략은 타입이 같은 빈을 찾아서 주입한다,
    - getBean(MemberRepository.class) 와 동일하다고 이해하면 된다.
    - 생성자에 파라미터가 많아도 다 찾아서 자동으로 주입한다.

정리: ComponentScan 은 Component가 붙은 클래스를 모두 스프링컨테이너에 스프링 빈으로 등록한다.
     일일히 @Bean을 붙여주지 않고 편리하지만, 의존관계주입은 어떻게 할것인가?
     의존관계 주입은 @Autowired를 사용해서 의존관계 자동주입한다.


탐색 위치와 기본 스캔 대상
- 탐색할 패키지의 시작 위치 지정
    - 모든 자바 클래스를 다 컴포넌트 스캔하면 시간이 오래 걸린다. 그래서 꼭 필요한 위치로부터 탐색하도록 시작 위치를 지정할 수 있다.
@ComponentScan{
        basePackages = "",
}
- basePackages : 탐색할 패키지의 시작 위치를 지정한다. 이 패키지를 포함해서 하위 패키지를 모두 탐색한다.
- basePackageClasses : 지정한 클래스의 패키지를 탐색 시작 위로 지정한다.
- 만약 지정하지 않으면 @ComponentScan이 붙은 설정 정보 클래스의 패키지가 시작 위치가 된다.

권장하는 방법
- 개인적으로 즐겨 사용하는 방법은 패키지 위치를 지정하지 않고, 설정 정보 클래스의 위치를 프로젝트 최상단에 두는것이다.
  최근에는 스프링 부트도 이 방법을 기본으로 제공한다.

참고로 스프링 부트를 사용하면 스프링 부트의 대표 시작 정보인 @SpringBootApplication를 이 프로젝트 시작 루트 위치에 두는 것이 관례다.
그리고 이 설정 안에 바로 @ComponentScan이 들어있다.

컴포넌트 스캔 기본 대상
- 컴포넌트 스캔은 @Component 뿐만 아니라 다음과 내용도 추가로 대상에 포함한다.
   - @Component : 컴포넌트 스캔에서 사용
   - @Controller : 스프링 MVC 컨트롤러에서 사용
   - @Service : 스프링 비즈니스 로직에서 사용
   - @Repository : 스프링 데이터 접근 계층에서 사용
   - @Configuration : 스프링 설정 정보에서 사용

참고 : 애노테이션은 상속관계라는 것이 없다. 애노테이션이 특정 애노테이션들 들고 있는 것을 인식할 수 있는 것은
      자바 언어가 지원하는 기능은 아니고, 스프링이 지원하는 기능이다.

컴포넌트 스캔의 용도 뿐만 아니라 다음 애노테이션이 있으면 스프링은 부가 기능을 수행한다.
- @Controller : 스프링 MVC 컨트롤러로 인식
- @Repository : 스프링 데이터 접근 계층으로 인식하고, 데이터 계층의 예외를 스프링 예외로 변환해준다.
- @Configuration : 앞서 보았듯이 스프링 설정 정보를 인식하고, 스프링 빈이 싱글톤을 유지하도록 추가 처리를 한다.
- @Service : Service는 특별한 처리를 하지 않는다. 대신 개발자들이 핵심 비즈니스 로직이 여기에 있겠구나 라고 비즈니스 계층을 인식하는데 도움이 된다.

참고 : userDefaultFilters 옵션은 기본적으로 켜져있는데, 이 옵션을 끄면 기본 스캔 대상들이 제외된다.


필터
- includeFilters : 컴포넌트 스캔 대상을 추가로 지정한다.
- excludeFilters : 컴포넌트 스캔에서 제외할 대상을 지정한다.

참고 : @Component면 충분하기 때문에, includeFilters를 사용할 일은 거의 없다. excludeFilters는 여러가지 이유로 간혹 사용할때는 있지만 많지는 않다.
        특히 최근 스프링 부트는 컴포넌트 스캔을 기존으로 제공하는데, 스프링 기본 설정에 맞추어 사용하는것을 권장하고, 선호하는 편이다.


중복 등록과 충돌
컴포넌트 스캔에서 같은 빈 이름을 등록하면 어떻게 될까?
다음 두가지 상황이 있다.

1. 자동 빈 등록 vs 자동 빈 등록
2. 수동 빈 등록 vs 자동 빈 등록

자동 빈 등록 vs 자동 빈 등록
- 컴포넌트 스캔에 의해 자동으로 스프링 빈이 등록되는데, 그 이름이 같은 경우 스프링은 오류를 발생 시킨다.
    (ConflictingBeanDefinitionException 예외 발생)

수동 빈 등록 vs 자동 빈 등록
- 이 경우 수동 빈 등록이 우선권을 가진다. (수동 빈이 자동 빈을 오버라이딩 해버린다.)

개발자가 의도적으로 이런 결과를 기대했다면, 자동 보다는 수동 우선권을 가지는 것이 좋다.
하지만 현실은 개발자가 의도적으로 설정해서 이런 결과를 만들어지기 보다는 여러 설정들이 꼬여서 이런 결과가 만들어지는 경우가 대부분이다.
그러면 정말 잡기 어려운 버그가 만들어진다. 항상 잡기 어려운 버그는 애매한 버그다.
그래서 최근 스프링 부트에서는 수동 빈 등록과 자동 빈 등록이 충돌나면 오류가 발생하도록 기본 값을 바꾸었다.

수동 빈 등록, 자동 빈 등록 오류시 스프링 부트 에러

** AutoAppConfig 오류, scan 오류

--------------------------------------------------------------------------------------
7. 다양한 의존관계 주입 방법

의존관계 주입은 크게 4가지 방법이 있다.
- 생성자 주입
- 수정자 주입(setter 주입)
- 필드 주입
- 일반 메서드 주입

생성자 주입
- 이름 그대로 생성자를 통해서 의존 관계를 주입 받는 방법이다.
- 지금까지 우리가 진행했던 방법이 생성자 주입이다.
특징
- 생성자 호출시점에 딱 1번만 호출되는 것이 보장된다.
- 불변,필수 의존관계 사용

중요!
생성자가 한 개 있을시에는 자동으로 @Autowired 의존성 자동주입이 default로 등록이 된다.

수정자 주입(setter 주입)
- setter라 불리는 필드의 값을 변경하는 수정자 메서드를 통해서 의존관계를 주입하는 방법이다.
특징
- 선택, 변경 가능성이 있는 의존관계 사용
- 자바빈 프로퍼티 규약의 수정자 메서드 방식을 사용하는 방법이다.

참고 : @Autowired의 기본 동작은 주입할 대상이 없으면 오류가 발생한다. 주입할 대상이 없어도 동작하게 하려면
       @Autowired(required = false)로 지정하면 된다.

참고 : 자바빈 프로퍼티, 자바에서는 과거부터 필드의 값을 직접 변경하지 않고, setXXX, getXXX 라는 메서드를 통해서
      값을 읽거나 수정하는 규칙을 만들었는데, 그것이 자바빈 프로퍼티 규약이다.

필드주입
- 이름 그대로 필드에 바로 주입하는 방법이다.
특징
- 코드가 간결해서 많은 개발자들을 유혹하지만 외부에서 변경이 불가능해서 테스트 하기 힘들다는 치명적인 단점이 있다.
- DI 프레임워크가 없으면 아무것도 할 수 없다.
- 사용하지말자!
    - 애플리케이션의 실제 코드와 관계없는 테스트 코드
    - 스프링 설정을 목적으로 하는 @Configuration 같은 곳에서만 특별한 용도로 사용

일반메서드 주입
- 일반 메서드를 통해서 주입 받을 수 있다.
특징
- 한번에 여러 필드를 주입 받을 수 있다.
- 일반적으로 잘 사용하지 않는다.

참고 : 어쩌면 당연한 이야기지만 의존관계 주입은 스프링 컨테이너가 관리하는 스프링 빈이어야 동작한다.
      스프링 빈이 아닌 Membmer 같은 클래스에서 @Autowired 코드를 적용해도 아무 기능도 동작하지 않는다.


옵션처리
주입할 스프링 빈이 없어도 동작해야 할 때가 있다.
그런데 @Autowired만 사용하면 required 옵션의 기본값이 true로 되어 있어서 자동 주입 대상이 없으면 오류가 발생한다.

자동 주입 대상을 옵션으로 처리하는 방법은 다음과 같다.
- @Autowired(required=false) : 자동 주입할 대상이 없으면 수정자 메서드 자체가 호출 안됨
- org.springframework.lang.@Nullable : 자동 주입할 대상 없으면 null이 입력된다.
- Optional<> : 자동 주입할 대상이 없으면 Optional.empty가 입력된다.


생성자 주입을 선택하라!
과거에는 수정자 주입과 필드 주입을 많이 사용했지만, 최근에는 스프링을 포함한 DI 프레임워크 대부분이 생성자 주입을 권장한다.
그 이유는 다음과 같다.

"불변"
- 대부분의 의존관계 주입은 한번 일어나면 애플리케이션이 종료시점까지 의존관계를 변경할 일이 없다.
  오히려 대부분의 의존관계는 애플리케이션 종료 전까지 변하면 안된다.(불변해야 한다.)
- 수정자 주입을 사용하면, setXXX 메서드를 public으로 열어두어야 한다.
- 누군가 실수로 변경할 수 도 있고, 변경하면 안되는 메서드를 열어두는 것은 좋은 설계 방법이 아니다.
- 생성자 중비은 객체를 생성할 때 딱 1번만 호출되므로 이후에 호출되는 일이 없다. 따라서 불변하게 설계할 수 있다.

final 키워드
- 생성자 주입을 사용하면 필드에 final 키워드를 사용할 수 있다. 그래서 생성자에서 혹시라도 값이 설정되지 않는 오류를 컴파일 시점에 막아준다.

컴파일 오류는 세상에서 가장 빠르고, 좋은 오류다.

참고 : 수정자 주입을 포함한 나머지 주입 방식은 모두 생성자 이후에 호출되므로, 필드에 final 키워드 사용할 수 없다.
      오직 생성자 주입 방식만 final 키워드를 사용할 수 있다.

정리
- 생성자 주입 방식을 선택하는 이유는 여러가지가 있지만, 프레임워크에 의존하지 않고, 순수한 자바 언어의 특징을 잘살리는 방법이기도하다.
- 기본으로 생성자 주입을 사용하고, 필수 값이 아닌 경우에는 수정자 주입 방식을 옵션으로부터 부여하면 된다. 생성자 주입과 수정자 주입을 동시에 사용할 수 있다.
- 항상 생성자 주입을 선택해라! 그리고 가끔 옵션이 필요하면 수정자 주입을 선택해라. 필드 주입은 사용하지 않는게 좋다.


롬북과 최신 트렌드
막상 개발 해보면, 대부분이 불변이고 그래서 생성자에 final 키워드를 사용하게 된다.
그런데 생성자도 만들고, 주입 받은 값을 대입하는 코드도 만들어야한다.
필드 주입처럼 좀 편리하게 사용하는 방법이 롬북이다.

lombok 기능
- 롬북 라이브러리가 제공하는 @RequireArgsConstructor 기능을 사용하면 final이 붙은 필드를 모아서 생성자를 자동으로 만들어준다.
  코드가 굉장히 간결해진다.
- getter,setter,tostring 등 기술이 많다.

정리
- 최근에는 생성자를 딱 1개 두고, @Autowired를 생략하는 방법을 주로 사용한다. 여기에 Lombok 라이브러리의  @RequireArgsConstructor
   함께 사용하면 기능은 다 제공하면서, 코드는 깔끔하게 사용할 수 있다.


조회 빈이 2개 이상 - 문제
@Autowired는 타입으로 조회한다.

타입으로 조회하기 때문에, 마치 다음 코드와 유사하게 동작한다.
ac.getBean(DiscountPolicy.class)

스프링 빈 조회에서 학습했듯이 타입으로 조회하면 선택된 빈이 2개 이상일 때 문제가 발생한다.
DiscountPolicy의 하위 타입인 FixDiscountPolicy, RateDiscountPolicy 둘 다 스프링 빈으로 선언하면 NoUniqueBeanDefinitionException 오류가 발생한다.


@Autowired 필드명, @Qualifier, @Primary
조회 대상 빈이 2개 이상일 때 해결 방법
- @Autowired 필드 명 매칭
- @Qualifier -> @Qualifier 끼리 매칭 -> 빈 이름 매칭
- @Primary 사용

- @Autowired 필드명 매칭
@Autowired는 타입 매칭을 시도하고, 이때 여러 빈이 있으면 필드 이름, 파라미터 이름으로 빈 이름을 추가 매칭한다.

@Autowired 매칭 정리
1. 타입매칭
2. 타입 매칭의 결과가 2개 이상일 때 필드 명, 파라미터 명으로 빈 이름 매칭

@Qualifier 사용
@Qualifier는 추가 구분자를 붙여주는 방법이다. 주입시 추가적인 방법을 제공하는 것이지 빈 이름을 변경하는 것은 아니다.

@Qualifierfh wndlqgkf Eo @Qualifier("mainDiscountPolicy") 를 못찾으면 어떻게 될까?
그러면 mainDiscountPolicy라는 이름의 스프링 빈을 추가로 찾는다. 하지만 경험상 @Qualfier는 @Qulifier를 찾는 용도로만 사용하는게 명확하고 좋다.

@Qualifier 정리
1. @Qualifier끼리 매칭
2. 빈 이름 매칭

@Primary 사용
@Primary는 우선순위를 정하는 방법이다. @Autowired 시에 여러 번 매칭되면 @Primary가 우선권을 가진다.

DiscountPolicy에 RateDiscountPolicy 클래스에 @Primary를 붙여주면 다른거 다 무시하고 우선권을 가지게 된다.

@Quilifier의 단점은 주입 받을 때 모든 코드에 @Quilifier를 붙여주어야 하는 단점이 있다.
@Primary를 사용하면 @Quilifier를 붙일 필요가 없다.

@Primary보다 @Quilifier가 우선순위가 높다.


