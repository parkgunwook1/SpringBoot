HTTPServletRequest 역할
- HTTP 요청 메시지를 개발자가 직접 파싱해서 사용해도 되지만, 매우 불편할 것이다. 서블릿은 개발자가 HTTP 요청 메시지를 편리하게
  사용할 수 있도록 개발자 대신에 HTTP 요청 메시지를 파싱한다. 그리고 그 결과를 HttpServletRequest 객체에 담아서 제공한다.

HttpServletRequest를 사용하면 다음과 같은 HTTP 요청 메시지를 편리하게 조회할 수 있다.
Http 요청 메시지
POST / save HTTP/1.1
Host : localhost:8081
content-Type: application/x-www-form-irlencoded

username=kim&age=20
- Start line
    - http 메소드
    - url
    - 쿼리 스트링
    - 스키마, 프로토콜
- 헤더
    - 헤더 조회
    - host, content-type
- 바디
    - form 파라미터 형식 조회
    - message body 데이터 직접 조회

HttpServletRequest 객체는 추가로 여러가지 부가기능도 함께 제공한다.
"임시 저장소 기능"
- 해당 http 요청이 시작부터 끝날 때까지 유지되는 임시 저장소 기능
    - 저장 : 'request.setAttribute(name,value)'
    - 조회 : 'request.getAttribute(name)'

"세션관리 기능"
- 'request.getSession(create: true)'

"중요"
HttpServletRequest, HttpServletResponse를 사용할 때 가장 중요한 점은 이 객체들이 http 요청 메시지, http 응답 메시지를
편리하게 사용하도록 도와주는 객체라는 점이다. 따라서 이 기능에 대해서 깊이있는 이해를 하려면 http 스펙이 제공하는 요청, 응답
메시지 자체를 이해해야 한다.

HTTP 요청 메시지를 통해 클라이언트에서 서버로 데이터를 전달하는 방법은 주로 다음 3가지 방법을 사용한다.
- GET - 쿼리 파라미터
    - /url*?username=hello&age=20
    - 메시지 바디 없이, URL의 쿼리 파라미터에 데이터를 포함해서 전달
    - 예) 검색, 필터, 페이징 등에서 많이 사용하는 방식
- POST-HTML Form
    - content:type:application/x-www-form-irlencoded
    - 메시지 바디에 쿼리 파라미터 형식으로 전달(키 밸류 전달)
    - 예) 회원 가입, 상품, 주문, HTML Form 사용
- HTTP message body에 데이터를 직접 담아서 요청
    - HTTP API에서 주로 사용, JSON, XML, TEXT
    - 데이터 형식은 주로 JSON 사용
    - POST, PUT, PATCH

복수 파라미터에서 단일 파라미터 조회
username=hello&username=kim과 같이 파라미터 이름은 하나인데, 값이 중복이면 어떻게 될까?
request.getParamerter()는 하나의 파라미터 이름에 대해서 단 하나의 값만 있을 때 사용해야 한다. 지금처럼 중복일때는
request.getParameterValues()를 사용해야 한다.
참고로 이렇게 중복일 때 request.getParameter()를 사용하면 request.getParameterValues()의 첫 번째 값을 반환한다.

application/x-www-form-urlencodedd 형식은 앞서 GET에서 살펴본 쿼리 파라미터 형식과 같다. 따라서 쿼리 파라미터 조회 메서드를
그대로 사용하면 된다. 클라이언트에서는 두 방식에 차이가 있지만, 서버 입장에서는 둘의 형식이 동일하므로, request.getParameter()로
편리하게 구분없이 조회할 수 있다.

정리하면 request.getParameter()는 GET URL 쿼리 파라미터 형식도 지원하고, POST HTML Form 형식도 둘 다 지원한다.

HTTP mssage body에 데이터를 직접 담아서 요청
    - HTTP API에서 주로 사용











