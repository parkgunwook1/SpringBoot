HTTPServletRequest 역할
- HTTP 요청 메시지를 개발자가 직접 파싱해서 사용해도 되지만, 매우 불편할 것이다. 서블릿은 개발자가 HTTP 요청 메시지를 편리하게
  사용할 수 있도록 개발자 대신에 HTTP 요청 메시지를 파싱한다. 그리고 그 결과를 HttpServletRequest 객체에 담아서 제공한다.

HttpServletRequest를 사용하면 다음과 같은 HTTP 요청 메시지를 편리하게 조회할 수 있다.
Http 요청 메시지
POST / save HTTP/1.1
Host : localhost:8081
content-Type: application/x-www-form-irlencoded

username=kim&age=20
- Start line
    - http 메소드
    - url
    - 쿼리 스트링
    - 스키마, 프로토콜
- 헤더
    - 헤더 조회
    - host, content-type
- 바디
    - form 파라미터 형식 조회
    - message body 데이터 직접 조회

HttpServletRequest 객체는 추가로 여러가지 부가기능도 함께 제공한다.
"임시 저장소 기능"
- 해당 http 요청이 시작부터 끝날 때까지 유지되는 임시 저장소 기능
    - 저장 : 'request.setAttribute(name,value)'
    - 조회 : 'request.getAttribute(name)'

"세션관리 기능"
- 'request.getSession(create: true)'

"중요"
HttpServletRequest, HttpServletResponse를 사용할 때 가장 중요한 점은 이 객체들이 http 요청 메시지, http 응답 메시지를
편리하게 사용하도록 도와주는 객체라는 점이다. 따라서 이 기능에 대해서 깊이있는 이해를 하려면 http 스펙이 제공하는 요청, 응답
메시지 자체를 이해해야 한다.

HTTP 요청 메시지를 통해 클라이언트에서 서버로 데이터를 전달하는 방법은 주로 다음 3가지 방법을 사용한다.
- GET - 쿼리 파라미터
    - /url*?username=hello&age=20
    - 메시지 바디 없이, URL의 쿼리 파라미터에 데이터를 포함해서 전달
    - 예) 검색, 필터, 페이징 등에서 많이 사용하는 방식
- POST-HTML Form
    - content:type:application/x-www-form-irlencoded
    - 메시지 바디에 쿼리 파라미터 형식으로 전달(키 밸류 전달)
    - 예) 회원 가입, 상품, 주문, HTML Form 사용
- HTTP message body에 데이터를 직접 담아서 요청
    - HTTP API에서 주로 사용, JSON, XML, TEXT
    - 데이터 형식은 주로 JSON 사용
    - POST, PUT, PATCH

복수 파라미터에서 단일 파라미터 조회
username=hello&username=kim과 같이 파라미터 이름은 하나인데, 값이 중복이면 어떻게 될까?
request.getParamerter()는 하나의 파라미터 이름에 대해서 단 하나의 값만 있을 때 사용해야 한다. 지금처럼 중복일때는
request.getParameterValues()를 사용해야 한다.
참고로 이렇게 중복일 때 request.getParameter()를 사용하면 request.getParameterValues()의 첫 번째 값을 반환한다.

application/x-www-form-urlencodedd 형식은 앞서 GET에서 살펴본 쿼리 파라미터 형식과 같다. 따라서 쿼리 파라미터 조회 메서드를
그대로 사용하면 된다. 클라이언트에서는 두 방식에 차이가 있지만, 서버 입장에서는 둘의 형식이 동일하므로, request.getParameter()로
편리하게 구분없이 조회할 수 있다.

정리하면 request.getParameter()는 GET URL 쿼리 파라미터 형식도 지원하고, POST HTML Form 형식도 둘 다 지원한다.

HTTP mssage body에 데이터를 직접 담아서 요청
    - HTTP API에서 주로 사용,JSON,XML,TEXT
    - 데이터 형식은 주로 JSON 사용
    - POST, PUT, PATCH
- HTTP 메시지 바디의 데이터를 InputStream을 사용해서 직접 읽을 수 있다.

HTTP 요청 데이터 - JSON
JSON 형식 전송
- content-type: application/json
- mssage body : {"username":"hello", "age":"20"}
결과 : messageBody = {"username":"hello", "age":"20"}

JSON 결과를 파싱해서 사용할 수 있는 자바 객체로 변환하려면 Jackson, Gson같은 JSON 변환 라이브러리 추가해서 사용해야한다.
위의 코드를 스프링부트를 사용하면 기본으로 Jackson 라이브러리 (ObjectMapper) 사용해서 아래처럼 가공시킬 수 있다.
messageBody = {"username":"hello","age":20}
helloData.getUsername() = hello
helloData.getAge() = 20

HTML form 데이터도 메시지 바디를 통해 전송되므로 직접 읽을 수 있다. 하지만 편리한 파라미터 조회기능 (request.getParameter())
을 이미 제공하기 때문에 파라미터 조회 기능을 사용하면 된다.

HttpServletResponse 역할
- HTTP 응답코드 지정
- 헤더 생성
- 바디 생성

HTTP 응답 데이터 - 단순 텍스트, HTML
- 단순 텍스트 응답
    - 앞에서 살펴봄 (writer.println("ok"));
- HTML 응답
- HTML API-MessageBpdt JSON 응답

application/json은 스팩상 utf-8 형식을 사용하도록 정의되어 있다. 그래서 스팩애서 charset=utf-8과 같은 추가 파라미터를 지원하지
않는다. 따라서 application/json 이라고만 사용해야 한다.

"템플릿 엔진으로"
서블릿은 자바 코드에서 동적으로 html 코드를 사용하는 것인데 너무 복잡하고 비효율적이다. 자바 코드로 html을 만들어 내는것보다
차라리 HTML 문서에 동적으로 변경해야 하는 부분만 자바 코드를 넣을 수 있다면 더 편리할 것이다.
이것이 바로 템플릿 엔진이 나온 이유이다. 템플릿 엔진을 사용하면 HTML 문서에 필요한 곳만 코드를 적용해서 동적으로 변경할 수 있다.
템플릿 엔진에는 JSP,Thymeleaf,Freemarker 등이 있다.

jsp는 자바 코드를 그대로 다 사용할 수 있다.
- <%@ page import="" %>
    - 자바의 import문과 같다.
- <% ~~ %>
    - 이 부분에는 자바 코드를 입력할 수 있다.
- <%= ~~ %>
    - 이 부분에는 자바 코드를 출력할 수 있다.

서블릿과 JSP 한계
서블릿으로 개발할 때는 뷰 화면을 위한 HTML을 만드는 작업이 자바 코드에 섞여서 지저분하고 복잡했다.
JSP를 사용한 덕분에 뷰를 생성하는 HTML 작업을 깔끔하게 가져가고, 중간중간 동적으로 변경이 필요한 부분에만 자바 코드를 적용했다.
그런데 해결되지 않는 몇가지 고민이 남는다.

회원 저장 JSP를 보면, 코드의 상위 절반은 회원을 저장하기 위한 비즈니스 로직이고, 나머지 하위 절반인 결과를 html로 보여주기 위한 뷰 영역이다.
코드를 잘보면 java코드, 데이터를 조회하는 리포지토리 등등 다양한 코드가 모두 JSP에 노출되어 있다. JSP가 너무 많은 역할을 한다.
이렇게 작은  프로젝트도 복잡하고, 머리가 아픈데 수천줄이 넘어가는 JSP를 더올리면 지옥이다.

그래서 MVC 패턴이 등장한다.
비즈니스 로직은 서블릿처럼 다른곳에서 처리하고, JSP는 목적에 맞게 HTML로 화면을 그리는 일에 집중하도록 하자.
과거 개발자들도 모두 비슷한 고민이 있었고, 그래서 MVC 패턴이 등장했다.

MVC 패턴 - 개요
"너무 많은 역할"
하나의 서블릿이나 JSP만으로 비즈니스 로직과 뷰 렌더링까지 모두 처리하게 되면, 너무 많은 역할을 하게되고, 결과적으로
유지보수가 어려워진다. 비즈니스 로직을 호출하는 부분에 변경이 발생해도 해당 코드를 손대야하고, UI를 변경할 일이 있어도
비즈니스 로직이 함께있는 해당 파일을 수정해야한다.

"변경의 라이플 사이클"
정말 중요한데, 진짜 문제는 둘 사이에 변경의 라이프 사이클이 다르다는 점이다. 예를 들어서 UI를 일부 수정하는 일과 비즈니스
로직을 수정하는 일은 각각 다르게 발생할 가능성이 매우 높고 대부분 서로에게 영향을 주지 않는다. 이렇게 변경의 라이프 사이클이 다른 부분을
하나의 코드로 관리하는 것은 유지보수하기 좋지 않다.

"기능 특화"
특히 JSP같은 뷰 템플릿은 화면을 렌더링하는데 최적화 되어 있기 때문에 이 부분의 업무만 담당하는 것이 가장 효과적이다.

"Model View Controller"
MVC 패턴은 지금까지 학습한 것 처럼 하나의 서블릿이나, JSP로 처리하던 것을 컨트롤러와 뷰라는 영역으로 서로 역할을 나눈것을 말한다.
웹 애플리케이션은 보통 이 MVC 패턴을 사용한다.

컨트롤러 : HTTP 요청을 받아서 파라미터를 검증하고, 비즈니스 로직을 실행한다. 그리고 뷰에 전달할 결과 데이터를 조회해서 모델에 담는다.
모델 : 뷰에 출력할 데이터를 담아둔다. 뷰가 필요한 데이터를 모두 모델에 담아서 전달해주는 덕분에 뷰는 비즈니스 로직이나
      데이터 접근을 몰라도 되고, 화면을 렌더링 하는 일에 집중할 수 있다.
뷰 : 모델에 담겨있는 데이터를 사용해서 화면을 그리는 일에 집중한다. 여기서는 HTML을 생성하는 부분을 말한다.

"참고"
컨트롤러에 비즈니스 로직을 둘 수도 있지만, 이렇게 되면 컨트롤러가 너무 많은 역할을 담당한다. 그래서 일반적으로 비즈니스
로직은 서비스(Service)라는 계층을 별도로 만들어서 처리한다. 그리고 컨트롤러는 비즈니스 로직이 있는 서비스를 호출하는 것을 담당한다.
참고로 비즈니스 로직을 변경하면 비즈니스 로직을 호출하는 컨트롤러의 코드도 변경될 수 있다.

MVC 패턴 - 적용
서블릿을 컨트롤러로 사용하고, 뷰를 jsp로 사용해본다.
Model은 HttpServletRequest 객체를 사용한다. request는 내부에 데이터 저장소를 가지고 있는데,
컨트롤러에서는 request.setAttribute() 사용해 모델에 데이터를 담고
, request.getAttribute()를 사용해 모델에서 데이터를 가지고온다.
사용하면 데이터를 보관하고, 조회할 수 있다.

redirect vs forward
리다이렉트는 실제 클라이언트 (웹 브라우저)에 응답이 나갔다가, 클라이언트가 redirect 경로로 다시 요청한다. 따라서 클라이언트가 인지할 수 있고,
URL 경로도 실제로 변경된다. 반면에 포워드는 서버 내부에서 일어나는 호출이기 때문에 클라이언트가 전혀 인지하지 못한다.

form의 action을 보면 절대 경로(/로 시작)이 아니라 상대경로(/로 시작X)하는 것을 확인할 수 있다. 이렇게 상대경로를 사용하면 폼 전송시
현재 URL이 속한 계층 경로 + save가 호출된다,
현재 계층 경로 : /servlet-mvc/members/new-form.jsp
결과 : /servlet-mvc/members/save

MVC패턴 - 한계
MVC 패턴을 적용한 덕분에 컨트롤러(서블릿) 역할과 , 뷰(JSP)를 렌더링 하는 역할을 명확하게 구분할 수 있었다.
특히 뷰는 화면을 그리는 역할에 충실한 덕분에, 코드가 깔끔하고 직관적이다. 단순하게 모델에서 필요한 데이터를 꺼내고, 화면을 만들면 된다.
그런데 컨트롤러는 중복이 많고, 필요하지 않는 코드들도 많아 보인다.

MVC 컨트롤러의 단점
"포워드 중복"
View로 이동하는 코드가 중복 호출되어야 한다. 물론 이부분을 메서드로 공동호해도 되지만, 해당 메서드도 항상 직접 호출해야한다.

"ViewPath에 중복"
그리고 만약 jsp가 아닌 thymeleaf 같은 뷰로 변경한다면 전체 코드를 다 변경해야 한다.

"사용하지 않는 코드"
HttpServletRequest request, HttpServletResponse response인 코드중에 거의 response를 사용하지 않았다.
그리고 이런 HttpServletRequest, HttpServletResponse  를 사용하는 코드는 테스트 케이스를 작성하기도 어렵다.

"공통 처리가 어렵다."
기능이 복잡해질 수 록 컨트롤러에서 공통으로 처리해야 하는 부분이 점점 더 많이 증가할 것이다. 단순히 공통 기능을 메서드로 뽑으면
될 것 같지만, 결과적으로 해당 메서드를 항상 호출해야 하고, 실수로 호출하지 않으면 문제가 될 것이다. 그리고 호출하는 것 자체도 중복이다.

"정리하면 공통 처리가 어렵다는 문제가 있다."
이 문제를 해결하려면 컨트롤러 호출 전에 먼저 공통 기능을 처리해야 한다. 소위 "수문장 역할"을 하는 기능이 필요하다
"프론트 컨트롤러 패턴"을 도입하면 이런 문제를 깔끔하게 해결할 수 있다.(입구를 하나로)
스프링 mvc의 핵심도 바로 이 프론트 컨트롤러에 있다.















