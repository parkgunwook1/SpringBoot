HTTP
이제는 모든것을 HTTP에 담아서 통신한다.
- HTML, TEXT
- IMAGE, 음성, 영상, 파일
- JSON, XML(API)
- 서버간에 데이터를 주고 받을 때도 대부분 HTTP 사용한다.
이제는 HTTP 시대이다.

HTTP/1.1 1997년 : 가장 많이 사용, 우리에게 가장 중요한 버전
    - RFC72300 ~ 7235

기반 프로토콜
- TCP : HTTP/1.1, HTTP/2는 TCP 기반이다.
- UDP : HTTP/3는 UDP 기반이다.
- 현재 HTTP/1.1 주로 사용
    - HTTP/2, HTTP/3도 점점 증가

HTTP 특징
- 클라이언트 서버 구조
- 무상태 프로토콜(스테이스리스), 비연결성
- HTTP 메시지
- 단순함, 확장 가능

HTTP는 클라이언트 서버 구조로 되어있다.
- Request Response 구조
- 클라이언트는 서버에 요청을 보내고, 응답을 대기
- 서버가 요청에 대한 결과를 만들어서 응답
클라이언트가 요청을 보내면 서버는 올때까지 기다리다가 응답을 보낸다.

Stateful, Stateless 차이
정리
- 상태 유지 : 중간에 다른 점원으로 바뀌면 안된다.
            (중간에 다른 점원으로 바뀔 때 상태 정보를 다른 점원에게 미리 알려줘야 한다.)
- 무상태 : 중간에 다른 점원으로 바뀌어도 된다.
         - 갑자기 고객이 증가해도 점원을 대거 투입할 수 있다.
         - 갑자기 클라이언트 요청이 증가해도 서버를 대거 투입할 수 있다.
       - 무상태는 응답 서버를 쉽게 바꿀 수 있다. -> 무하한 서버 증설 가능

상태 유지 - Stateful
- 항상 같은 서버 유지되어야 한다.

무상태 - Stateless
- 상태를 보관하지 않고 응답한다.
- 서버가 장애나도 다른 서버로 전달 가능하다.

무상태 - Stateless
스케일 아웃 - 수평 확장 관리

Stateless 실무한계
- 모든것을 무상태로 설계 할 수 있는 경우도 있고 없는 경우도 있다.
- 로그인한 사용자의 경우 로그인 했다는 상태를 서버에 유지
- 일반적으로 브라우저 쿠키와 서버 세션등을 사용해서 상태 유지
- 상태 유지는 최소한만 사용해야 한다.

Stateless 단점
- 데이터를 너무 많이 보내야 한다.

정리
웹 애플리케이션 설계는 최대한 무상태로 설계한다.
어쩔수 없는 경우에 한에서만 상태유지를 한다.

비연결성
- HTTP는 기본이 연결을 유지하지 않는 모델
- 1시간 동안 수천명이 서비스를 사용해도 실제 서버에서 동시에 처리하는 요청은 수십개 이하로 매우 작음
   예) 웹 브라우저에서 계속 연속해서 검색 버튼을 누르지 않는다.
- 서버 자원을 매우 효율적으로 사용할 수 있음

비연결성 한계와 극복
- TCP/IP 연결을 새로 맺어야 한다. 3 way handshake 시간 추가가 되어서 클라이언트의 시간을 잡아먹는다.
- 웹 브라우저로 사이트를 요청하면 HTML 뿐만 아니라 자바스크립트, CSS, 추가 이미지 등 수많은 자원이 함께 다운로드한다.
- 하지만 지금은 HTTP 지속 연결(Persistend Connections)로 문제 해결
- HTTP/2, HTTP/3 최적화되었다.

HTTP 초기 - 연결, 종료 낭비
- 연결 종료 연결 종료 반복하면 메모리 낭비, 시간 잡아먹는다.

HTTP 지속 연결(Persistent Connections)
- 시간이 단축된다.

스테이스리스를 기억하자
(서버 개발자들이 어려워하는 업무)
- 정말 같은 시간에 딱 맞추어 발생하는 대용량 트래픽
   예) 선착순 이벤트, 명절 KTX 예약, 학과 수업 등록
   예) 저녁 6:00 선착순 1000명 치킨 할인 이벤트 -> 수만명 동시 요청
최대한 스테이스리스 하게 설계해야 한다.

HTTP 메서드
종류 : GET, POST, PUT, DELETE
- 서버가 수행해야 할 동작 과정
    - GET : 리소스조회
    - POST : 요청 내역 처리

API URI 고민
- 리소스의 의미는 뭘까?
    - 회원을 등록하고 수정하고 조회하는게 리소스가 아니다.
    - 회원이라는 개념 자체가 리소스다.
    - 예) 미네랄을 캐라 -> 미네랄이 리소스
- 리소스를 어떻게 식별하는게 좋을까?
    - 회원을 등록하고 수정하고 조회하는 것을 모두 배제
    - 회원이라는 리소스만 식별하면 된다. -> 회원 리소스를 URI에 매핑

리소스와 행위를 분리 - 가장 중요한 것은 리소스를 식별하는 것
- URI는 리소스만 식별
- 리소스와 해당 리소스를 대상으로 하는 행위를 분리
    - 리소스 : 회원
    - 행위 : 조회, 등록, 삭제, 변경
- 리소스는 명사, 행위는 동사(미네랄을 캐라)
- 행위는 어떻게 구분?

HTTP 메서드 종류 - 주요 메서드
- GET : 리소스 조회
- POST : 요청 데이터 처리, 주로 등록에 사용
- PUT : 리소스를 대체, 해당 리소스가 없으면 생성
- PATCH : 리소스 부분 변경
- DELETE : 리소스 삭제

HTTP 메서드 종류 - 기타 메서드
- HEAD : GET과 동일하지만 메시지 부분을 제외하고, 상태 줄과 헤더만 반환
- OPTIONS : 대상 리소스에 대한 통신 가능 옵션(메서드)을 설명 (주로CORS에서 사용)
- CONNECT : 대상 자원으로 식별되는 서버에 대한 터널을 설정
- TRACE : 대상 리소스에 대한 경로를 따라 메시지 루프백 테스트를 수행

GET
- 리소스 조회
- 서버에 전달하고 싶은 데이터는 query(쿼리 파라미터, 쿼리 스트링)를 통해서 전달
- 메시지 바디를 사용해서 데이터를 전달할 수 있지만, 지원하지 않는 곳이 많아서 권장하지 않음.
- 조회 데이터는 최대한 GET을 사용하라.

POST
- 요청 데이터 처리
- 메시지 바디를 통해 서버로 요청 데이터 전달
- 서버는 요청 데이터를 처리
    - 메시지 바디를 통해 들어온 데이터를 처리하는 모든 기능을 수행한다.
- 주로 전달된 데이터로 신규 리소스 등록, 프로세스 처리에 사용
- 데이터가 변경되거나, 프로세스가 진행되거나, 어쩔수 없을 때 POST를 사용하면 된다.

POST 정리
1. 새 리소스 생성(등록)
    - 서버가 아직 식별하지 않은 새 리소스 생성
2. 요청 데이터 처리
    - 단순히 데이터를 생성하거나, 변경하는 것을 넘어서 프로세스를 처리해야 하는 경우
    - 예) 주문에서 결제완료 -> 배달시작 -> 배달완료 처럼 단순히 값 변경을 넘어 프로세스의 상태가 변경되는 경우
    - POST의 결과로 새로운 리소스가 생성되지 않을 수도 있음
3. 다른 메서드로 처리하기 애매한 경우
    - 예) JSON으로 조회 데이터를 넘겨야 하는데, GET 메서드를 사용하기 어려운 경우
    - 애매하면 POST

PUT
- 리소스를 완전히 대체한다.
    - 리소스가 있으면 대체
    - 리소스가 없으면 생성
    - 쉽게 이야기해서 기초 리소스를 지우고 완전히 덮어버림
- 중요! 클라이언트가 리소스를 식별
    - 클라이언트가 리소스 위치를 알고 URI 지정
    - POST와 차이점

PATCH
- 리소스를 부분 변경한다.
- 버전땜에 PATCH가 안되는 서버는 POST를 사용하면 된다.

DELETE
- 리소스 제거

HTTP 메서드의 속성
- 안전
- 멱등
- 캐시가능

안전(Safe)
- 호출해도 리소스를 변경하지 않는다.

멱등(Idempotent)
- 한 번 호출하든 두 번 호출하든 100번 호출하든 결과가 똑같다.
- 멱등 메서드
    - GET : 한 번 조회하든, 두 번 조회하든 같은 결과가 조회된다.
    - PUT : 결과를 대체한다. 따라서 같은 요청을 여러번 해도 최종 결과는 같다.
    - DELETE : 결과를 삭제한다. 같은 요청을 여러번 해도 삭제된 결과는 똑같다.
    - POST : 멱등이 아니다! 두 번 호출하면 같은 결제가 중복해서 발생할 수 있다.

멱등 활용
- 자동 복구 메커니즘
- 서버가 TIMEOUT 등으로 정상 응답을 못주었을 때, 클라이언트가 같은 요청을 다시해도 되는가? 판단 근거

캐시가능 - Cacheable
- 응답 결과 리소스를 캐시해서 사용해도 되는가?
- GET, HEAD, POST, PATCH 캐시가능
- 실제로는 GET,HEAD 정도만 캐시로 사용
    - POST, PATCH는 본문 내용까지 캐시 키로 고려해야 하는데, 구현이 쉽지 않음

클라이언트에서 서버로 데이터 전송시 데이터 전달 방식은 크게 2가지가 있다.
- 쿼리 파라미터를 통한 데이터 전송
    - GET
    - 주로 정렬 필터(검색어)
- 메시지 바디를 통한 데이터 전송
    - POST, PUT,PATCH
    - 회원 가입, 상품 주문, 리소스 등록, 리소스 변경

정적 데이터 조회
- 이미지, 정적 텍스트 문서
- 조회는 GET 사용
- 정적 데이터는 일반적으로 쿼리 파라미터 없이 리소스 경로로 단순하게 조회 가능

동적 데이터 조회
- 주로 검색, 게시판 목록에서 정렬 필터(검색어)
- 조회 조건을 줄여주는 필터, 조회 결과를 정렬하는 정렬 조건에 주로 사용
- 조회는 GET 사용
- GET은 쿼리 파라미터 사용해서 데이터를 전달

주의* GET은 조회에서만 사용. 리소스 변경이 발생하는 곳에 사용하면 안됨.

HTML Form 데이터 전송
- HTML Form submit시 POST 전송
    - 예) 회원 가입, 상품 주문, 데이터 변경
- Content Type : application/x-www-form-irlencoded 사용
    - form의 메시지 바디를 통해서 전송(key=value, 쿼리 파라미터 형식)
    - 전송 데이터를 url encoding처리
        - 예) abc김 -> abc%EA%B9%80
- HTML Form은 GET 전송도 가능
- Content-Type : multipart/form-data
    - 파일 업로드 같은 바이너리 데이터 전송시 사용
    - 다른 종류의 여러 파일과 폼의 내용 함께 전송 가능(그래서 이름이 multipart)
참고 : HTML Form 전송은 GET, POST만 지원


HTTP API 데이터 전송
- 서버 TO 서버
    - 백엔드 시스템 통신
- 앱 클라이언트
    - 아이폰, 안드로이드
- 웹 클라이언트
    - HTML에서 Form 전송 대신 자바 스크립트를 통한 통신에 사용(AJAX)
    - 예) React, VuewJs 같은 웹 클라이언트와 API 통신
- POST, PUT, PATCH : 메시지 바디를 통해 데이터 전송
- GET : 조회, 쿼리 파라미터로 데이터 전달
- Content-Type : application/json을 주로 사용 (사실상 표준)
    - TEXT, XML, JSON 등등

회원 관리 시스템
POST - 신규 자원 등록 특징
- 클라이언트는 등록될 리소스의 URL을 모른다
    - 회원 등록/members -> POST
    - POST /members
- 서버가 새로 등록된 리스소 URI를 생성해준다.
    - HTTP/1.1 201 Created
      Location: /members/100
- 컬렉션
    - 서버가 관리하는 리소스 디렉토리
    - 서버가 리소스의 URI를 생성하고 관리
    - 여기서 컬렉션은 /members

파일 관리 시스템
PUT - 신규 자원 등록 특징
- 클라이언트가 리소스 URI를 알고 있어야 한다.
    - 파일 등록 /files/{filename} -> PUT
    - PUT /files/star.jpg
- 클라이언트가 직접 리소스의 URI를 지정한다.
- 스토어
    - 클라이언트가 관리하는 리소스 저장소
    - 클라이언트가 리소스의 URI를 알고 관리
    - 여기서 스토어는 /files

HTML FORM 사용
- HTML FORM은 GET,POST만 지원
- AJAX 같은 기술을 사용해서 해결 가능, 하지만 순수 HTML FORM에서만 이야기 해보겠다.
- GET,POST만 지원하므로 제약이 있음

컨트롤 URI를 사용할 때도 많다.

정리
참고하면 좋은 URI 설계 개념
- 문서
    - 단일 개념(파일 하나, 객체 인스턴스, 데이터베이스 row)
    - 예) /members/100, files/star.jpg
- 컬렉션
    - 서버가 관리하는 리소스 디렉터리
    - 서버가 리소스의 URI를 생성하고 관리
    - 예) /members
- 스토어
    - 클라이언트가 관리하는 지원 저장소
    - 클라이언트가 리소스의 URI를 알고 관리
    - 예) /files
- 컨트롤러, 컨트롤 URI
    - 문서, 컬렉션, 스토어로 해결하기 어려운 추가 프로세스 실행
    - 동사를 직접 사용
    - 예) /members/{id}/delete

상태코드
클라이언트가 보낸 요청의 처리 상태를 응답에서 알려주는 기능
- 1xx (Informational): 요청이 수신되어 처리중
- 2xx (Successful): 요청 정상 처리
- 3xx (Redirection): 요청을 완료하려면 추가 행동이 필요
- 4xx (Client Error): 클라이언트 오류, 잘못된 문법등으로 서버가 요청을 수행할 수 없음
- 5xx (Server Error): 서버 오류, 서버가 정상 요청을 처리하지 못함

2xx(Successful)
클라이언트의 요청을 성공적으로 처리
- 200 OK => 요청성공
- 201 Created => 요청 성공해서 새로운 리소스가 생성됨
- 202 Accepted => 요청이 접수되었으나 처리가 완료되지 않았음
- 204 No Content => 서버가 요청을 성공적으로 수행했지만, 응답 페이로드 본문에 보낼 데이터가 없음

3xx(Redirection)
요청을 완료하기 위해 유저 에이전트(웹브라우저))의 추가 조치 필요
*** 리다이렉션 이해
    - 웹 브라우저는 3xx 응답의 결과에 Location 헤더가 있으면, Location 위치로 자동 이동(리다이렉트)

    리다이렉션 종류
    - 영구 리다이렉션 - 특정 리소스의 URI가 영구적으로 이동
        예) /members -> /users
    - 일시 리다이렉션 - 일시적인 변경
        - 주문 완료 후 주문 내역 화면으로 이동
        - PRG : Post/Redirect/Get
    - 특수 리다이렉션
        - 결과 대신 캐시를 사용

영구 리다이렉션 301, 308
- 리소스의 URI가 영구적으로 이동
- 원래의 URL를 사용X, 검색 엔진 등에서도 변경 인지
- 301 Mpved Permanently
    - 리다이렉트시 요청 메서드가 GET으로 변하고, 본문이 제거될 수 있음(MAY)
    - 클라이언트가 /event 페이지에 post로 요청하고, 301로 /new-event 응답 받고, 자동 리다이렉트 : GET으로 변경함.
      즉, 메시지 바디가 다 사라짐. 새로운 페이지 new-event 페이지를 띄움.
- 308 Permanent Redurect
    - 301과 기능은 같음
    - 리다이렉트시 요총 메서드와 본문 유지(처음 POST를 보내면 리다이렉트도 POST로 반환)
    - 실무에서는 거의 301 사용. event 페이지의 데이터를 저장하고 new-event 페이지에 데이터가 거의다 바뀌기 때문

일시적인 리다이렉션 302, 307, 303
- 리소스의 URI가 일시적으로 변경
- 따라서 검색 엔진 등에서 URL을 변경하면 안됨
- 302 Found
    - 리다이렉트시 요청 메서드가 GET으로 변하고, 본문이 제거될 수 있음(MAY)
- 307 Temporary Redirect
    - 302와 기능은 같음
    - 리다이렉트시 요청 메서드와 본문 유지(요청 메서드를 변경하면 안된다. MUST NOT)
- 303 See Other
    - 302와 기능은 같음
    - 리다이렉트시 요청 메서드가 GET으로 변경

PRG : Post/Redirect/Get
* 일시적인 리다이렉션 - 예시
- Post로 주문후에 웹 브라우저를 새로고침하면?
- 새로고침은 다시 요청
- 중복 주문이 될 수 있다.

PRG : Post/Redirect/Get
* 일시적인 리다이렉션 - 예시
- POST로 주문후에 새로 고침으로 인한 중복 주문 방지
- POST로 주문후에 주문 결과 화면을 GET 메서드로 리다이렉트
- 새로고침해도 결과 화면을 GET으로 조회
- 중복 주문 대신에 결과 화면만 GET으로 다시 요청

PRG 이후 리다이렉트
    - URL이 이미 POST -> GET으로 리다이렉트 됨
    - 새로 고침해도 GET으로 결과 화면만 조회

기타 리다이렉션 300, 304
- 300 Multiple Choices : 안슨다.
- 304 Not Modified
    - 캐시를 목적으로 사용
    - 클라이언트에게 리소스가 수정되지 않았음을 알려준다. 따라서 클라이언트는 로컬 pc에 저장된 캐시를 재사용한다.(캐시로 리다이렉트)
    - 304 응답은 응답에 메시지 바디를 포함하면 안된다.(로컬 캐시를 사용해야 하므로)
    - 조건부 GET, HEAD 요청시 사용

4XX (Client Error) 클라이언트 오류
- 클라이언트의 요청에 잘못된 문법 등으로 서버가 요청을 수행할 수 없음
- 오류의 원인이 클라이언트에 있음
- 중요! 클라이언트가 이미 잘못된 요청, 데이터를 보내고 있기 때문에, 똑같은 재시도가 실패함
- 요청 구문, 메시지 등등 오류
- 클라이언트는 요청 내용을 다시 검토하고, 보내야함
     예) 요청 파라미터가 잘못되거나, API 스펙이 맞지 않을 때

401 Unauthorized - 클라이언트가 해당 리소스에 대한 인증이 필요함.
- 인증 되지 않음 : 인증 -> 본인이 누구인지 확인,(로그인)
- 인가 : 권한부여 (admin 권한처럼 특정 리소스에 접근할 수 있는 권한 인증이 있어야 인가가 있음)

403 Forbidden - 서버가 요청을 이해했지만 승인을 거부함
- 주로 인증 자격 증명은 있지만, 접근 권한이 불충분한 경우
    예) 어드민 등급이 아닌 사용자가 로그인은 했지만, 어드민 등급의 리소스에 접근하는 경우

404 Not Found - 요청 리소스를 찾을 수 없음
- 요청 리소스가 서버에 없음
- 또는 클라이언트가 권한이 부족한 리소스에 접근할 때 해당 리소스를 숨기고 싶을 때 , 이 사이트를 숨기고 싶을때

5XX (Server Error) - 서버 오류
- 서버 문제로 오류 발생
- 서버에 문제가 있기 때문에 재시도 하면 성공할 수도 있음(복구가 되거나 등등)

500 Internal Server Error - 서버 문제로 오류 발생, 애매하면 500 오류
- 서버 내부 문제로 오류 발생
- 애매하면 500 오류

503 Service Unavailable - 서비스 이용 불가
- 서버가 일시적인 과부하 또는 예정된 작업으로 잠시 요청을 처리할 수 없음
- Retry-After 헤더 필드로 얼마뒤에 복구되는지 보낼 수도 있음

400은 클라이언트 문제, 500은 서버 문제
500 에러는 정말 서버에 문제가 있을때 내야한다.
---------------------------------------------------------------------------------------------------

HTTP 일반헤더
- HTTP 전송에 필요한 모든 부가정보
    예) 메시지 바디의 내용, 메시지 바디의 크기, 압축, 인증, 요청 클라이언트, 서버 정보, 캐시 관리 정보
- 필요시 임의의 헤더 추가 가능

헤더 분류
    - General 헤더 : 메시지 전체에 적용되는 정보
    - Request 헤더 : 요청 정보
    - Response 헤더 : 응답 정보
    - Entity 헤더 : 엔티티 바디 정보, 예) Content-Type:text/html[json], Content-Length:3423

HTTP BODY- message body- RFC2616(과거)
- 메시지 본문(message body)은 엔티티 본문(entity body)을 전달하는데 사용
- 엔티티 본문은 요청이나 응답에서 전달할 실제 데이터
- 엔티티 헤더는 엔티티 본문의 데이터를 해석할 수 있는 정보 제공 -> 데이터 유형(html,json),데이터 길이, 압축 정보 등등

1999년 RFC2616 사라지고
2014년 RFC7230 ~ 7235 등장했다. 그러면서 엔티티가 사라짐.

RFC723X 변화
- 엔티티(Entity) > 표현(Representation)
- Representation = represertation Metadata + Representation Data
- 표현 = 표현 메타데이터 + 표현 데이터

HTTP BODY - message body - RFC7230(최신)
- 메시지 본문(message body)을 통해 표현 데이터 전달
- 메시지 본문 = 페이로드
- 표현은 요청이나 응답에서 전달할 실제 데이터
- 표현 헤더는 표현 데이터를 해석할 수 있는 정보 제공 => 데이터 유형, 데이터 길이, 압축 정보

표현
- Content-Type : 표현 데이터의 형식
- Content-Encoding : 표현 데이터의 압축 방식
- Content-Language : 표현 데이터의 자연언어
- Content-Length : 표현 데이터의 길이

- 표현 헤더는 전송, 응답 둘다 사용

Content-Type 표현 데이터의 형식 설명
- 미디어 타입, 문자 인코딩
예) - text/html; charset=utf8
    - application/json => json은 기본값이 utf8
    - image/png

Content-Encoding 표현 데이터 인코딩
- 표현 데이터를 압축하기 위해 사용
- 데이터를 전달하는 곳에서 압축 후 인코딩 헤더 추가
- 데이터를 읽는 쪽에서 인코딩 헤더의 정보로 압축 해제
예) - gzip
    - deflate
    - identity

Content-Language 표현 데이터의 자연 언어
- 표현 데이터의 자연 언어를 표현
예) - ko
    - en
    - en-US

Content-Length 표현 데이터의 길이
- 바이트 단위
- Transfer-Encoding(전송 코딩)을 사용하면 Content-Length를 사용하면 안됨

협상(콘텐츠 네고시에이션) 클라이언트가 선호하는 표현 요청
- Accept : 클라이언트가 선호하는 미디어 타입 전달
- Accept-Charset : 클라이언트가 선호하는 문자 인코딩
- Accept-Encoding : 클라이언트가 선호하는 압축 인코딩
- Accept-Lenguage : 클라이언트가 선호하는 자연 언어

- 협상 헤더는 요청시에만 사용

Accept-Language 적용 전
GET /event 서버로 요청 -> 서버 응답 : 기본값 영어 hello 반환

Accept-Language 적용 후
GET /event
Accept-Language:ko 서버로 요청 => 서버 응답 : 다중 언어 지원 서버임으로 한국어로 반환

협상과 우선순위1 Quality Values(q)
- Quality Values(q) 값 사용
- 0~1, 클수록 높은 우선순위
- 생략하면 1
- Accept-Language: ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
    1. ko-KR;q=1 (q생략시 1)
    2. ko;q=0.9
    3. en-US;q=0.8
    4. en:q=0.7

협상과 우선순위2 Quality Values(q)
- 구체적인 것이 우선한다.
- Accept: text/*. text/plain, text/plain;format=flowed, */*
    1.  text/plain;format=flowed
    2. text/plain
    3. text/**
    4. */*

전송 방식 설명
- 단순 전송
- 압축 전송
- 분할 전송
- 범위 전송

단순 전송
- Content-Length의 길이를 알 때 사용한다.
- 한번에 요청을 하고 한번에 응답을 받는다

압축 전송 Content-Encoding
- 단순 전송을 쥐집 같은것으로 압축을한다.
- 추가로 Content-Encoding을 넣어줘야한다. 무엇으로 압축이 되었는지 정보 제공해야한다.

분할 전송 Transfer-Encoding
- 나눠서 보내고 나눠서 받는다.
- 용량이 큰거를 분할해서 받으면 바로바로 받을 수 있다.
- content-length를 넣으면 안된다. 왜냐? 길이를 알수가 없다.

범위 전송 Range,Content-Range
- 응답을 받다가 뚝 끊겼으면 다시 처음부터 받기에는 메모리가 아깝다.
- 그래서 범위를 지정해서 받을 수 있다.
- Range:bytes= 1001-2000 범위지정
- Content-Range: bytes 1001-2000/ 2000 으로 반환


일반 정보
- From : 유저 에이전트의 이메일 정보
- Referer : 이전 웹 페이지 주소
- User-Agent : 유저 에이전트 애플리케이션 정보
- Server : 요청을 처리하는 오리진 서버의 소프트웨어 정보
- Date : 메시지가 생성된 날짜

From 유저 에이전트의 이메일 정보
- 일반적으로 잘 사용되지 않음
- 검색엔진 같은 곳에서, 주로 사용
- 요청에서 사용

Referer 이전 웹 페이지 주소
- 현재 요청된 페이지의 이전 웹 페이지의 주소
- Referer를 사용해서 유입 경로 분석 가능
- 요청에서 사용

User-Agent 유저 에이전트 애플리케이션 정보
- 클라이언트의 애플리케이션 정보(웹 브라우저 정보, 등등)
- 요청에서 사용

Server 요청을 처리하는 ORIGIN 서버의 소프트웨어 정보
- 응답에서만 사용

Date 메시지가 발생한 날짜와 시간
- 응답에서 사용


특별한 정보
- Host : 요청한 호스트 정보(도메인)
- Location : 페이지 리다이렉션
- Allow : 허용 가능한 HTTP 메서드
- Retry-After : 유저 에이전트가 다음 요청을 하기까지 기다려야 하는 시간

Host 요청한 호스트 정보(도메인)
- 요청에서 사용, 필수
- 하나의 서버가 여러 도메인을 처리해야 할 때
- 하나의 IP 주소에 여러 도메인이 적용되어 있을 때

쿠키
- Set-Cookie : 서버에서 클라이언트로 쿠키 전달(응답)
- Cookie : 클라이언트가 서버에서 받은 쿠키를 저장하고, HTTP 요청시 서버로 전달

Stateless
- HTTP는 무상태(Stateless) 프로토콜이다.
- 클라이언트와 서버가 요청과 응답을 주고 받으면 연결이 끊어진다.
- 클라이언트가 다시 요청하면 서버는 이전 요청을 기억하지 못한다.
- 클라이언트와 서버는 서로 상태를 유지하지 않는다.

쿠키 로그인
1. 웹 브라우저 POST /login HTTP/1.1 user=홍길동 => 서버에 전달.
2. HTTP/1.1 200 OK Set-Cookie: user=홍길동 => 웹 브라우저 내부 쿠키 저장소에 user=홍길동 저장시킨다.

쿠키에 키와 밸류를 넘겨 저장하면 모든 요청에 쿠키 정보를 자동 포함시킨다.

쿠키
예) set-cookie: sessionId=abcde 1234; expires=Sat, 26-Dec-2020 00:00:00 GMT; path=/; domain=.google.con; Secure
- 사용처
    - 사용자 로그인 세션 관리
    - 광고 정보 트래킹
- 쿠키 정보는 항상 서버에 전송됨
    - 네트워크 트래픽 추가 유발
    - 최소한의 정보만 사용(세션 id, 인증 토큰)
    - 서버에 전송하지 않고, 웹 브라우저 내부에 데이터를 저장하고 싶다면 웹 스토리지(localStorage, sessionStorage) 참고
- 주의!(쿠키, 웹스토리지)
    - 보안에 민감한 데이터는 저장하면 안됨(주민번호, 신용카드 번호 등등)

쿠키 - 생명주기 Expires, max-age
- Set-Cookie : expires=Sat, 26-Dec-2020 04:39:21 GMT
    - 만료일이 되면 쿠키 삭제
- Set-Cookie: max-age=3600(3600초)
    - 0이나 음수를 지정하면 쿠키 삭제
- 세션 쿠키 : 만료 날짜를 생략하면 브라우저 종료시 까지만 유지
- 영속 쿠키 : 만료 날짜를 입력하면 해당 날짜까지 유지

쿠키 - 도메인
쿠키는 도메인을 지정할 수 있다.
예) domain=example.org
- 명시 : 명시한 문서 기존 도메인 + 서브 도메인 포함
    - domain=example.org를 지정해서 쿠키 생성
        - example.org는 물론이고
        - dev.example.org도 쿠키 접근
- 생략 : 현재 문서 기준 도메인만 적용
    - example.org 에서 쿠키를 생성하고 domain 지정 생략
        - example.org 에서만 쿠키 접근
        - dev.example.org는 쿠키 미접근

쿠키 - 경로(Path)
예) path=/home
- 이 경로를 포함한 하위 경로 페이지만 쿠키 접근
- 일반적으로 path=/ 루트로 지정

쿠키 - 보안 (Secure, HttpOnly, SameSite)
- Secure
    - 쿠키는 http, https를 구분하지 않고 전송
    - secure를 적용하면 https인 경우에만 전송
- HttpOnly
    - XSS 공격 방지
    - 자바스크립트에서 접근 불가
    - HTTP 전송에만 사용
- SameSite
    - XSRF 공격 방지
    - 요청 도메인과 쿠키에 설정된 도메인이 같은 경우만 쿠키 전송


캐시 기본 동작

캐시가 없을 때
- 데이터가 변경되지 않아도 계속 네트워크를 통해서 데이터를 다운로드 받아야한다.
- 인터넷 네트워크는 매우 느리고 비싸다.
- 사용자 느낌에서 엄청 느리다.

캐시 적용
- 캐시 덕분에 캐시 가능 시간동안 네트워크를 사용하지 않아도된다.
- 비산 네트워크 사용량을 줄일 수 있다.
- 사용자 느낌에서 빠르다.

웹 브라우저에서 서버로 요청하고 브라우저 캐시에 유효시간 동안 저장해놓는다. 그 후에 웹 브라우저에서 서버로 요청하면
브라우저 캐시를 먼저 뒤지고 있으면 가져와서 전달한다.

캐시 시간 초과
- 캐시 시간이 초과하면 서버를 통해 데이터를 다시 조회하고, 캐시를 갱신한다.
- 이 때 다시 네트워크 다운로드가 발생한다.

캐시 시간 초과
- 캐시 유효 시간이 초과해서 서버에 다시 요청하면 다음 두 가지 상황이 나타난다.
    1. 서버에서 기존 데이터를 변경한 상태
    2. 서버에서 기존 데이터를 변경하지 않는 상태
- 캐시 만료후에도 서버에서 데이터를 변경하지 않는 상태
    - 생각해보면 데이터를 전송하는 대신에 저장해 두었던 캐시를 재사용할 수 있다.
    - 단 클라이언트의 데이터와 서버의 데이터가 같다는 사실을 확인할 수 있는 방법이 필요하다.

검증 헤더 : Last-Modified: 2020년 11월 10일 10:00:00
조건부    : if-modified-since: 2020년 11월 10일 10:00:00

검증 헤더와 조건부 요청
- 캐시 유효 시간이 초과해도, 서버의 데이터가 갱신되지 않으면
- 304 Not Modified + 헤더 메타 정보만 응답(바디x)
- 클라이언트는 서버가 보낸 응답 헤더 정보로 캐시의 메타 정보를 갱신
- 클라이언트는 캐시에 저장되어 있는 데이터 재활용
- 결과적으로 네트워크 다운로드가 발생하지만 용량이 적은 헤더 정보만 다운로드
- 매우 실용적인 해결책

검증 헤어와 조건부 요청
- 검증 헤더
    - 캐시 데이터와 서버 데이터가 같은지 검증하는 데이터
    - Last-Modified, ETag
- 조건부 요청 헤더
    - 검증 헤더로 조건에 따른 분기
    - if-Modified-Since:Last-Modified 사용
    - if-None-Match: ETag 사용
    - 조건이 만족하면 200 OK
    - 조건이 만족하지 않으면 304 Not Modified

검증 헤더와 조건부 요청 Last-Modified, If-Modified-Since 단점
- 1초 미만 단위로 캐시 조정이 불가능
- 날짜 기반의 로직 사용
- 데이터를 수정해서 날짜가 다르지만, 같은 데이터를 수정해서 데이터 결과가 똑같은 경우
- 서버에서 별도의 캐시 로직을 관리하고 싶은 경우

검증 헤더와 조건부 요청 ETag, If,None-Match
- ETag(Entity Tag)
- 캐시용 데이터에 임의의 고유한 버전 이름을 다라둠
- 데이터가 변경되면 이름을 바꾸어서 변경함
- 단순하게 ETag만 보내서 같으면 유지, 다르면 다시 받기

- 단순하게 ETag만 서버에 보내서 같으면 유지, 다르면 다시 받기
- 캐시 제어 로직을 서버에서 완전히 관리

캐시 제어 헤더
- Cache-Control : max-age
    - 캐시 유효 시간, 초 단위
- Cache-Control : no-cache
    - 데이터는 캐시해도 되지만, 항상 원(origin) 서버에 검증하고 사용
- Cache-Control : no-store
    - 데이터에 민감한 정보가 있으므로 저장하면 안됨 (메모리에서 사용하고 최디해 빨리 삭제)

프록시 서버
Cache-Control 캐시 지시어 - 기타
- Cache-Control : public
    - 응답이 public 캐시에 저장되어도 됨
- Cache-Control:private
    - 응답이 해당 사용자만을 위한 것임, private 캐시에 저장해야함(기본값)
- Cache-Control:s-maxage
    - 프록시 캐시에만 적용되는 max-age
- Age:60(HTTP 헤더)
    - 오리진 서버에서 응답 후 프록시 캐시 내에 머문 시간(초)

캐시 무효화
Cache-Control 확실한 캐시 무효화 응답
정말 중요한 정보들을 위해 캐시에 확실히 저장 못하게 하는 방법.
- Cache-Control : no-cache, no-store, must-revalidate
- Pragma: no-cache
    - HTTP 1.0 하위 호환

Cache-Control 캐시 지시어 - 확실한 캐시 무효화
- Cache-Control: no-cache
    - 데이터는 캐시해도 되지만, 항상 원 서버에 검증하고 사용(이름에 주의!)
- Cache-Control: no-store
    - 데이터에 민감한 정보가 있으므로 저장하면 안됨(메모리에서 사용하고 최대한 빨리 삭제)
- Cache-Control: must-revalidate
    - 캐시 만료후 최초 조회시 원 서버에 검증해야함
    - 원 서버 접근 실패시 반드시 오류가 발생함 -504(Gateway Timeout)
    - must-revalidate는 캐시 유효 시간이라면 캐시를 사용함
- Pragma: no-cache
    - HTTP 1.0 하위 호환















